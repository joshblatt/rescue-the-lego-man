
RescueLegoMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b84  08003b84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b8c  08003b8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08003ba0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003ba0  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116a2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002088  00000000  00000000  000316de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00033768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e3b  00000000  00000000  000354f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e49  00000000  00000000  00037333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008baa5  00000000  00000000  0004917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff0  00000000  00000000  000d4c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b54 	.word	0x08003b54

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003b54 	.word	0x08003b54

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f84e 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 faf8 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 faa2 	bl	8000a24 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e0:	f000 f940 	bl	8000764 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004e4:	f000 f8ba 	bl	800065c <MX_TIM1_Init>
  MX_TIM3_Init();
 80004e8:	f000 f9b2 	bl	8000850 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ec:	f000 fa16 	bl	800091c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80004f0:	f000 fac2 	bl	8000a78 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 fa6c 	bl	80009d0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80004f8:	f000 f882 	bl	8000600 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <main+0x50>)
 8000500:	f002 f9d2 	bl	80028a8 <HAL_TIM_PWM_Start>
  initMotors(&htim1, &htim3, &htim4);
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <main+0x54>)
 8000506:	4907      	ldr	r1, [pc, #28]	; (8000524 <main+0x58>)
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x5c>)
 800050a:	f000 fb7e 	bl	8000c0a <initMotors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  testMotors();
 800050e:	f000 ffe5 	bl	80014dc <testMotors>
	  testServo(&htim2);
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x50>)
 8000514:	f000 fff6 	bl	8001504 <testServo>
	  testMotors();
 8000518:	e7f9      	b.n	800050e <main+0x42>
 800051a:	bf00      	nop
 800051c:	200001dc 	.word	0x200001dc
 8000520:	20000028 	.word	0x20000028
 8000524:	200000c4 	.word	0x200000c4
 8000528:	20000150 	.word	0x20000150

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fb02 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xd0>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a4:	2354      	movs	r3, #84	; 0x54
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fc65 	bl	8001e84 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c0:	f000 fb1e 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fec7 	bl	8002374 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fb08 	bl	8000c00 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C2_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C2_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C2_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C2_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C2_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C2_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C2_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C2_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C2_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C2_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C2_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C2_Init+0x50>)
 800063e:	f001 fadd 	bl	8001bfc <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 fada 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000070 	.word	0x20000070
 8000654:	40005800 	.word	0x40005800
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b092      	sub	sp, #72	; 0x48
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]
 800067e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2220      	movs	r2, #32
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fa5c 	bl	8003b44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <MX_TIM1_Init+0x100>)
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <MX_TIM1_Init+0x104>)
 8000690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680;
 8000692:	4b32      	ldr	r3, [pc, #200]	; (800075c <MX_TIM1_Init+0x100>)
 8000694:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8000698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <MX_TIM1_Init+0x100>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <MX_TIM1_Init+0x100>)
 80006a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <MX_TIM1_Init+0x100>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_TIM1_Init+0x100>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <MX_TIM1_Init+0x100>)
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <MX_TIM1_Init+0x100>)
 80006bc:	f002 f8a5 	bl	800280a <HAL_TIM_PWM_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 fa9b 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d6:	4619      	mov	r1, r3
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_TIM1_Init+0x100>)
 80006da:	f002 ff25 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80006e4:	f000 fa8c 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f4:	2300      	movs	r3, #0
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2204      	movs	r2, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM1_Init+0x100>)
 800070e:	f002 fa83 	bl	8002c18 <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000718:	f000 fa72 	bl	8000c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000734:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <MX_TIM1_Init+0x100>)
 8000740:	f002 ff60 	bl	8003604 <HAL_TIMEx_ConfigBreakDeadTime>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800074a:	f000 fa59 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <MX_TIM1_Init+0x100>)
 8000750:	f000 fcca 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000754:	bf00      	nop
 8000756:	3748      	adds	r7, #72	; 0x48
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000150 	.word	0x20000150
 8000760:	40010000 	.word	0x40010000

08000764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_TIM2_Init+0xe8>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_TIM2_Init+0xe8>)
 800079e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80007a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_TIM2_Init+0xe8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_TIM2_Init+0xe8>)
 80007ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_TIM2_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_TIM2_Init+0xe8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007be:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_TIM2_Init+0xe8>)
 80007c0:	f001 ffd4 	bl	800276c <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007ca:	f000 fa19 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d8:	4619      	mov	r1, r3
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_TIM2_Init+0xe8>)
 80007dc:	f002 fade 	bl	8002d9c <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007e6:	f000 fa0b 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <MX_TIM2_Init+0xe8>)
 80007ec:	f002 f80d 	bl	800280a <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007f6:	f000 fa03 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_TIM2_Init+0xe8>)
 800080a:	f002 fe8d 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000814:	f000 f9f4 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM2_Init+0xe8>)
 8000830:	f002 f9f2 	bl	8002c18 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800083a:	f000 f9e1 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM2_Init+0xe8>)
 8000840:	f000 fc52 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200001dc 	.word	0x200001dc

08000850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_TIM3_Init+0xc4>)
 8000874:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_TIM3_Init+0xc8>)
 8000876:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_TIM3_Init+0xc4>)
 800087a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800087e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_TIM3_Init+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1680;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_TIM3_Init+0xc4>)
 8000888:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800088c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_TIM3_Init+0xc4>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_TIM3_Init+0xc4>)
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800089a:	481e      	ldr	r0, [pc, #120]	; (8000914 <MX_TIM3_Init+0xc4>)
 800089c:	f001 ffb5 	bl	800280a <HAL_TIM_PWM_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008a6:	f000 f9ab 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	4619      	mov	r1, r3
 80008b8:	4816      	ldr	r0, [pc, #88]	; (8000914 <MX_TIM3_Init+0xc4>)
 80008ba:	f002 fe35 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008c4:	f000 f99c 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c8:	2360      	movs	r3, #96	; 0x60
 80008ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_TIM3_Init+0xc4>)
 80008e0:	f002 f99a 	bl	8002c18 <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008ea:	f000 f989 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2204      	movs	r2, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <MX_TIM3_Init+0xc4>)
 80008f6:	f002 f98f 	bl	8002c18 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000900:	f000 f97e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <MX_TIM3_Init+0xc4>)
 8000906:	f000 fbef 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c4 	.word	0x200000c4
 8000918:	40000400 	.word	0x40000400

0800091c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_TIM4_Init+0xac>)
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <MX_TIM4_Init+0xb0>)
 8000942:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_TIM4_Init+0xac>)
 8000946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_TIM4_Init+0xac>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1680;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM4_Init+0xac>)
 8000954:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8000958:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM4_Init+0xac>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_TIM4_Init+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_TIM4_Init+0xac>)
 8000968:	f001 ff4f 	bl	800280a <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000972:	f000 f945 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4619      	mov	r1, r3
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_TIM4_Init+0xac>)
 8000986:	f002 fdcf 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000990:	f000 f936 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	220c      	movs	r2, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM4_Init+0xac>)
 80009ac:	f002 f934 	bl	8002c18 <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009b6:	f000 f923 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM4_Init+0xac>)
 80009bc:	f000 fb94 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000028 	.word	0x20000028
 80009cc:	40000800 	.word	0x40000800

080009d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART1_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a08:	f002 fe62 	bl	80036d0 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f8f5 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000010c 	.word	0x2000010c
 8000a20:	40011000 	.word	0x40011000

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART2_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f002 fe38 	bl	80036d0 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f8cb 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000224 	.word	0x20000224
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_USART6_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART6_UART_Init+0x4c>)
 8000ab0:	f002 fe0e 	bl	80036d0 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f8a1 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000198 	.word	0x20000198
 8000ac8:	40011400 	.word	0x40011400

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a2c      	ldr	r2, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_GPIO_Init+0x124>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	211b      	movs	r1, #27
 8000b56:	4827      	ldr	r0, [pc, #156]	; (8000bf4 <MX_GPIO_Init+0x128>)
 8000b58:	f001 f836 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000b62:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_GPIO_Init+0x12c>)
 8000b64:	f001 f830 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f24e 0133 	movw	r1, #57395	; 0xe033
 8000b6e:	4823      	ldr	r0, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000b70:	f001 f82a 	bl	8001bc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0x128>)
 8000b8c:	f000 fe98 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000b90:	231b      	movs	r3, #27
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_GPIO_Init+0x128>)
 8000ba8:	f000 fe8a 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000bac:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0x12c>)
 8000bc6:	f000 fe7b 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB13 PB14
                           PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 8000bca:	f24e 0333 	movw	r3, #57395	; 0xe033
 8000bce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000be4:	f000 fe6c 	bl	80018c0 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020400 	.word	0x40020400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>

08000c0a <initMotors>:
#include <motor.h>

#include <main.h>

void initMotors(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
	  HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 8000c16:	2104      	movs	r1, #4
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f001 fe45 	bl	80028a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8000c1e:	2104      	movs	r1, #4
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f001 fe41 	bl	80028a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_4);
 8000c26:	210c      	movs	r1, #12
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f001 fe3d 	bl	80028a8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	68b8      	ldr	r0, [r7, #8]
 8000c32:	f001 fe39 	bl	80028a8 <HAL_TIM_PWM_Start>
	  htim1->Instance->CCR2 = 850;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f240 3252 	movw	r2, #850	; 0x352
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
	  htim3->Instance->CCR2 = 850;
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f240 3252 	movw	r2, #850	; 0x352
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
	  htim4->Instance->CCR4 = 850;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f240 3252 	movw	r2, #850	; 0x352
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
	  htim3->Instance->CCR1 = 850;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f240 3252 	movw	r2, #850	; 0x352
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000c5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c62:	f000 fcf7 	bl	8001654 <HAL_Delay>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <moveForwards>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

	HAL_Delay(500);
}

void moveForwards() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2120      	movs	r1, #32
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <moveForwards+0x68>)
 8000c7a:	f000 ffa5 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <moveForwards+0x68>)
 8000c86:	f000 ff9f 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <moveForwards+0x68>)
 8000c90:	f000 ff9a 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9a:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <moveForwards+0x68>)
 8000c9c:	f000 ff94 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <moveForwards+0x6c>)
 8000ca6:	f000 ff8f 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <moveForwards+0x68>)
 8000cb2:	f000 ff89 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <moveForwards+0x70>)
 8000cbe:	f000 ff83 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <moveForwards+0x68>)
 8000cc8:	f000 ff7e 	bl	8001bc8 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd0:	f000 fcc0 	bl	8001654 <HAL_Delay>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <moveBackwards>:

void moveBackwards() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2120      	movs	r1, #32
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <moveBackwards+0x68>)
 8000cee:	f000 ff6b 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <moveBackwards+0x68>)
 8000cfa:	f000 ff65 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4812      	ldr	r0, [pc, #72]	; (8000d4c <moveBackwards+0x68>)
 8000d04:	f000 ff60 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <moveBackwards+0x68>)
 8000d10:	f000 ff5a 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <moveBackwards+0x6c>)
 8000d1a:	f000 ff55 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <moveBackwards+0x68>)
 8000d26:	f000 ff4f 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <moveBackwards+0x70>)
 8000d32:	f000 ff49 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <moveBackwards+0x68>)
 8000d3c:	f000 ff44 	bl	8001bc8 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d44:	f000 fc86 	bl	8001654 <HAL_Delay>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020000 	.word	0x40020000

08000d58 <turnRight>:

void turnRight() {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <turnRight+0x68>)
 8000d62:	f000 ff31 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6c:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <turnRight+0x68>)
 8000d6e:	f000 ff2b 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <turnRight+0x68>)
 8000d78:	f000 ff26 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d82:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <turnRight+0x68>)
 8000d84:	f000 ff20 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <turnRight+0x6c>)
 8000d8e:	f000 ff1b 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <turnRight+0x68>)
 8000d9a:	f000 ff15 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <turnRight+0x70>)
 8000da6:	f000 ff0f 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <turnRight+0x68>)
 8000db0:	f000 ff0a 	bl	8001bc8 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8000db4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db8:	f000 fc4c 	bl	8001654 <HAL_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <turnLeft>:

void turnLeft() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <turnLeft+0x68>)
 8000dd6:	f000 fef7 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	4814      	ldr	r0, [pc, #80]	; (8000e34 <turnLeft+0x68>)
 8000de2:	f000 fef1 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2110      	movs	r1, #16
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <turnLeft+0x68>)
 8000dec:	f000 feec 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df6:	480f      	ldr	r0, [pc, #60]	; (8000e34 <turnLeft+0x68>)
 8000df8:	f000 fee6 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <turnLeft+0x6c>)
 8000e02:	f000 fee1 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <turnLeft+0x68>)
 8000e0e:	f000 fedb 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <turnLeft+0x70>)
 8000e1a:	f000 fed5 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2102      	movs	r1, #2
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <turnLeft+0x68>)
 8000e24:	f000 fed0 	bl	8001bc8 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8000e28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e2c:	f000 fc12 	bl	8001654 <HAL_Delay>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020400 	.word	0x40020400
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <stopMotors>:

void stopMotors() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2120      	movs	r1, #32
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <stopMotors+0x68>)
 8000e4a:	f000 febd 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e54:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <stopMotors+0x68>)
 8000e56:	f000 feb7 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <stopMotors+0x68>)
 8000e60:	f000 feb2 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <stopMotors+0x68>)
 8000e6c:	f000 feac 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2110      	movs	r1, #16
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <stopMotors+0x6c>)
 8000e76:	f000 fea7 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <stopMotors+0x68>)
 8000e82:	f000 fea1 	bl	8001bc8 <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <stopMotors+0x70>)
 8000e8e:	f000 fe9b 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <stopMotors+0x68>)
 8000e98:	f000 fe96 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea0:	f000 fbd8 	bl	8001654 <HAL_Delay>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <moveServo>:
#include <main.h>
#include <servo.h>

void moveServo(TIM_HandleTypeDef *htim2) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	htim2->Instance->CCR1 = 75;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	224b      	movs	r2, #75	; 0x4b
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8000ec4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec8:	f000 fbc4 	bl	8001654 <HAL_Delay>

	htim2->Instance->CCR1 = 150;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2296      	movs	r2, #150	; 0x96
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8000ed4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ed8:	f000 fbbc 	bl	8001654 <HAL_Delay>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f22:	2007      	movs	r0, #7
 8000f24:	f000 fc8a 	bl	800183c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_I2C_MspInit+0xa4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d13c      	bne.n	8000fd0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000f90:	f000 fc96 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f94:	2308      	movs	r3, #8
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f98:	2312      	movs	r3, #18
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <HAL_I2C_MspInit+0xac>)
 8000fb0:	f000 fc86 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000fbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_I2C_MspInit+0xa8>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_TIM_PWM_MspInit+0xa8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10e      	bne.n	8001014 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001012:	e036      	b.n	8001082 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <HAL_TIM_PWM_MspInit+0xb0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d116      	bne.n	800104c <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	201d      	movs	r0, #29
 8001040:	f000 fc07 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001044:	201d      	movs	r0, #29
 8001046:	f000 fc20 	bl	800188a <HAL_NVIC_EnableIRQ>
}
 800104a:	e01a      	b.n	8001082 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_TIM_PWM_MspInit+0xb4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d115      	bne.n	8001082 <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_TIM_PWM_MspInit+0xac>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	201e      	movs	r0, #30
 8001078:	f000 fbeb 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800107c:	201e      	movs	r0, #30
 800107e:	f000 fc04 	bl	800188a <HAL_NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010000 	.word	0x40010000
 8001090:	40023800 	.word	0x40023800
 8001094:	40000400 	.word	0x40000400
 8001098:	40000800 	.word	0x40000800

0800109c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ac:	d115      	bne.n	80010da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	201c      	movs	r0, #28
 80010d0:	f000 fbbf 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d4:	201c      	movs	r0, #28
 80010d6:	f000 fbd8 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a58      	ldr	r2, [pc, #352]	; (8001268 <HAL_TIM_MspPostInit+0x180>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11f      	bne.n	800114a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b57      	ldr	r3, [pc, #348]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a56      	ldr	r2, [pc, #344]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b54      	ldr	r3, [pc, #336]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	484b      	ldr	r0, [pc, #300]	; (8001270 <HAL_TIM_MspPostInit+0x188>)
 8001144:	f000 fbbc 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001148:	e08a      	b.n	8001260 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001152:	d11f      	bne.n	8001194 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a43      	ldr	r2, [pc, #268]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001182:	2301      	movs	r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4838      	ldr	r0, [pc, #224]	; (8001270 <HAL_TIM_MspPostInit+0x188>)
 800118e:	f000 fb97 	bl	80018c0 <HAL_GPIO_Init>
}
 8001192:	e065      	b.n	8001260 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a36      	ldr	r2, [pc, #216]	; (8001274 <HAL_TIM_MspPostInit+0x18c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d13c      	bne.n	8001218 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a2a      	ldr	r2, [pc, #168]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	481f      	ldr	r0, [pc, #124]	; (8001270 <HAL_TIM_MspPostInit+0x188>)
 80011f2:	f000 fb65 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001206:	2302      	movs	r3, #2
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <HAL_TIM_MspPostInit+0x190>)
 8001212:	f000 fb55 	bl	80018c0 <HAL_GPIO_Init>
}
 8001216:	e023      	b.n	8001260 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM4)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_TIM_MspPostInit+0x194>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d11e      	bne.n	8001260 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_TIM_MspPostInit+0x184>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001250:	2302      	movs	r3, #2
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_TIM_MspPostInit+0x198>)
 800125c:	f000 fb30 	bl	80018c0 <HAL_GPIO_Init>
}
 8001260:	bf00      	nop
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010000 	.word	0x40010000
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	40000400 	.word	0x40000400
 8001278:	40020800 	.word	0x40020800
 800127c:	40000800 	.word	0x40000800
 8001280:	40020400 	.word	0x40020400

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_UART_MspInit+0x188>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12c      	bne.n	8001300 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	4b52      	ldr	r3, [pc, #328]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a51      	ldr	r2, [pc, #324]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012de:	23c0      	movs	r3, #192	; 0xc0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ee:	2307      	movs	r3, #7
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4846      	ldr	r0, [pc, #280]	; (8001414 <HAL_UART_MspInit+0x190>)
 80012fa:	f000 fae1 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012fe:	e081      	b.n	8001404 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a44      	ldr	r2, [pc, #272]	; (8001418 <HAL_UART_MspInit+0x194>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12c      	bne.n	8001364 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_UART_MspInit+0x18c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_UART_MspInit+0x18c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001342:	230c      	movs	r3, #12
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	2307      	movs	r3, #7
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	482f      	ldr	r0, [pc, #188]	; (800141c <HAL_UART_MspInit+0x198>)
 800135e:	f000 faaf 	bl	80018c0 <HAL_GPIO_Init>
}
 8001362:	e04f      	b.n	8001404 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_UART_MspInit+0x19c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d14a      	bne.n	8001404 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART6_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_UART_MspInit+0x18c>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_UART_MspInit+0x18c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_UART_MspInit+0x18c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013d2:	2308      	movs	r3, #8
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <HAL_UART_MspInit+0x1a0>)
 80013de:	f000 fa6f 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013f4:	2308      	movs	r3, #8
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <HAL_UART_MspInit+0x198>)
 8001400:	f000 fa5e 	bl	80018c0 <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40011000 	.word	0x40011000
 8001410:	40023800 	.word	0x40023800
 8001414:	40020400 	.word	0x40020400
 8001418:	40004400 	.word	0x40004400
 800141c:	40020000 	.word	0x40020000
 8001420:	40011400 	.word	0x40011400
 8001424:	40020800 	.word	0x40020800

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f000 f8ce 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM2_IRQHandler+0x10>)
 8001482:	f001 fac1 	bl	8002a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200001dc 	.word	0x200001dc

08001490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM3_IRQHandler+0x10>)
 8001496:	f001 fab7 	bl	8002a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000c4 	.word	0x200000c4

080014a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM4_IRQHandler+0x10>)
 80014aa:	f001 faad 	bl	8002a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000028 	.word	0x20000028

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <testMotors>:
		openServo(htim2);
		closeServo(htim2);
	}
}

void testMotors() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	//moveMotors();
	moveForwards();
 80014e0:	f7ff fbc6 	bl	8000c70 <moveForwards>
	stopMotors();
 80014e4:	f7ff fcac 	bl	8000e40 <stopMotors>
	moveBackwards();
 80014e8:	f7ff fbfc 	bl	8000ce4 <moveBackwards>
	stopMotors();
 80014ec:	f7ff fca8 	bl	8000e40 <stopMotors>
	turnRight();
 80014f0:	f7ff fc32 	bl	8000d58 <turnRight>
	stopMotors();
 80014f4:	f7ff fca4 	bl	8000e40 <stopMotors>
	turnLeft();
 80014f8:	f7ff fc68 	bl	8000dcc <turnLeft>
	stopMotors();
 80014fc:	f7ff fca0 	bl	8000e40 <stopMotors>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <testServo>:

void testServo(TIM_HandleTypeDef *htim2) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	moveServo(htim2);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fcd1 	bl	8000eb4 <moveServo>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	; (8001568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001546:	f7ff ffb7 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f002 fad7 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7fe ffbd 	bl	80004cc <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001554:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001560:	08003b94 	.word	0x08003b94
  ldr r2, =_sbss
 8001564:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001568:	2000026c 	.word	0x2000026c

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f94f 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fc9e 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f967 	bl	80018a6 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f0:	f000 f92f 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000000 	.word	0x20000000
 800160c:	20000008 	.word	0x20000008
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	20000268 	.word	0x20000268

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000268 	.word	0x20000268

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181c:	f7ff ff8e 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff29 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff3e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff8e 	bl	8001790 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff31 	bl	8001700 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e159      	b.n	8001b90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f040 8148 	bne.w	8001b8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d005      	beq.n	8001912 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190e:	2b02      	cmp	r3, #2
 8001910:	d130      	bne.n	8001974 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 0201 	and.w	r2, r3, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b03      	cmp	r3, #3
 800197e:	d017      	beq.n	80019b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	69b9      	ldr	r1, [r7, #24]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80a2 	beq.w	8001b8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_GPIO_Init+0x2e8>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <HAL_GPIO_Init+0x2e8>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_GPIO_Init+0x2e8>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a62:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_GPIO_Init+0x2ec>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x202>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2f4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x1fe>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_GPIO_Init+0x2f8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x1fa>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a46      	ldr	r2, [pc, #280]	; (8001bbc <HAL_GPIO_Init+0x2fc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x1f6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a45      	ldr	r2, [pc, #276]	; (8001bc0 <HAL_GPIO_Init+0x300>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x1f2>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x204>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x204>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x204>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x204>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x204>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad4:	4935      	ldr	r1, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x2ec>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b06:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f aea2 	bls.w	80018dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e12b      	b.n	8001e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff f986 	bl	8000f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c60:	f000 fd5c 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8001c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a81      	ldr	r2, [pc, #516]	; (8001e70 <HAL_I2C_Init+0x274>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d807      	bhi.n	8001c80 <HAL_I2C_Init+0x84>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a80      	ldr	r2, [pc, #512]	; (8001e74 <HAL_I2C_Init+0x278>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bf94      	ite	ls
 8001c78:	2301      	movls	r3, #1
 8001c7a:	2300      	movhi	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e006      	b.n	8001c8e <HAL_I2C_Init+0x92>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a7d      	ldr	r2, [pc, #500]	; (8001e78 <HAL_I2C_Init+0x27c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0e7      	b.n	8001e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a78      	ldr	r2, [pc, #480]	; (8001e7c <HAL_I2C_Init+0x280>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0c9b      	lsrs	r3, r3, #18
 8001ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_I2C_Init+0x274>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_I2C_Init+0xd4>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	e009      	b.n	8001ce4 <HAL_I2C_Init+0xe8>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <HAL_I2C_Init+0x284>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	099b      	lsrs	r3, r3, #6
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	495c      	ldr	r1, [pc, #368]	; (8001e70 <HAL_I2C_Init+0x274>)
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d819      	bhi.n	8001d38 <HAL_I2C_Init+0x13c>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e59      	subs	r1, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d18:	400b      	ands	r3, r1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HAL_I2C_Init+0x138>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1e59      	subs	r1, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d32:	e051      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001d34:	2304      	movs	r3, #4
 8001d36:	e04f      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_I2C_Init+0x168>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e012      	b.n	8001d8a <HAL_I2C_Init+0x18e>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x196>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e022      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10e      	bne.n	8001db8 <HAL_I2C_Init+0x1bc>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e58      	subs	r0, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	440b      	add	r3, r1
 8001da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db6:	e00f      	b.n	8001dd8 <HAL_I2C_Init+0x1dc>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6911      	ldr	r1, [r2, #16]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68d2      	ldr	r2, [r2, #12]
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	000186a0 	.word	0x000186a0
 8001e74:	001e847f 	.word	0x001e847f
 8001e78:	003d08ff 	.word	0x003d08ff
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e264      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	4ba3      	ldr	r3, [pc, #652]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d00c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4ba0      	ldr	r3, [pc, #640]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d112      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b9d      	ldr	r3, [pc, #628]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b99      	ldr	r3, [pc, #612]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d157      	bne.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e23f      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x74>
 8001eea:	4b91      	ldr	r3, [pc, #580]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a8a      	ldr	r2, [pc, #552]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b88      	ldr	r3, [pc, #544]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a87      	ldr	r2, [pc, #540]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a83      	ldr	r2, [pc, #524]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a80      	ldr	r2, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fb7e 	bl	800163c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fb7a 	bl	800163c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e204      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fb6a 	bl	800163c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fb66 	bl	800163c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1f0      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c4      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4952      	ldr	r1, [pc, #328]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_RCC_OscConfig+0x2b0>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fb1f 	bl	800163c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fb1b 	bl	800163c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a5      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4940      	ldr	r1, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_OscConfig+0x2b0>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fafe 	bl	800163c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002044:	f7ff fafa 	bl	800163c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e184      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d030      	beq.n	80020d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCC_OscConfig+0x2b4>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fade 	bl	800163c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fada 	bl	800163c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e164      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x200>
 80020a2:	e015      	b.n	80020d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x2b4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fac7 	bl	800163c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff fac3 	bl	800163c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e14d      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a0 	beq.w	800221e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x2b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_OscConfig+0x2b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_RCC_OscConfig+0x2b8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff fa89 	bl	800163c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e011      	b.n	8002152 <HAL_RCC_OscConfig+0x2ce>
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	42470000 	.word	0x42470000
 8002138:	42470e80 	.word	0x42470e80
 800213c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7ff fa7c 	bl	800163c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e106      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_RCC_OscConfig+0x4e4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x2f0>
 8002166:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a80      	ldr	r2, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	e01c      	b.n	80021ae <HAL_RCC_OscConfig+0x32a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x312>
 800217c:	4b7b      	ldr	r3, [pc, #492]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a7a      	ldr	r2, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	4b78      	ldr	r3, [pc, #480]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a77      	ldr	r2, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
 8002194:	e00b      	b.n	80021ae <HAL_RCC_OscConfig+0x32a>
 8002196:	4b75      	ldr	r3, [pc, #468]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a74      	ldr	r2, [pc, #464]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a71      	ldr	r2, [pc, #452]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d015      	beq.n	80021e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7ff fa41 	bl	800163c <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff fa3d 	bl	800163c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0c5      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ee      	beq.n	80021be <HAL_RCC_OscConfig+0x33a>
 80021e0:	e014      	b.n	800220c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fa2b 	bl	800163c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fa27 	bl	800163c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0af      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ee      	bne.n	80021ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b56      	ldr	r3, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 809b 	beq.w	800235e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002228:	4b50      	ldr	r3, [pc, #320]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d05c      	beq.n	80022ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d141      	bne.n	80022c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x4ec>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff f9fb 	bl	800163c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff f9f7 	bl	800163c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e081      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	019b      	lsls	r3, r3, #6
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	3b01      	subs	r3, #1
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	061b      	lsls	r3, r3, #24
 800228c:	4937      	ldr	r1, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x4ec>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f9d0 	bl	800163c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff f9cc 	bl	800163c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e056      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x41c>
 80022be:	e04e      	b.n	800235e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x4ec>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff f9b9 	bl	800163c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff f9b5 	bl	800163c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e03f      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x44a>
 80022ec:	e037      	b.n	800235e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e032      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_RCC_OscConfig+0x4e8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d028      	beq.n	800235a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d121      	bne.n	800235a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d11a      	bne.n	800235a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002330:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002332:	4293      	cmp	r3, r2
 8002334:	d111      	bne.n	800235a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	3b01      	subs	r3, #1
 8002344:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d107      	bne.n	800235a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40007000 	.word	0x40007000
 800236c:	40023800 	.word	0x40023800
 8002370:	42470060 	.word	0x42470060

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0cc      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d90c      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d044      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e067      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff f8ea 	bl	800163c <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff f8e6 	bl	800163c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d20c      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f84a 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00
 8002530:	40023800 	.word	0x40023800
 8002534:	08003b6c 	.word	0x08003b6c
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	2300      	movs	r3, #0
 8002552:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002558:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d00d      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x40>
 8002564:	2b08      	cmp	r3, #8
 8002566:	f200 80bd 	bhi.w	80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
 800256e:	2b04      	cmp	r3, #4
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3a>
 8002572:	e0b7      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002576:	60bb      	str	r3, [r7, #8]
       break;
 8002578:	e0b7      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800257c:	60bb      	str	r3, [r7, #8]
      break;
 800257e:	e0b4      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002588:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04d      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	461a      	mov	r2, r3
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	ea02 0800 	and.w	r8, r2, r0
 80025ae:	ea03 0901 	and.w	r9, r3, r1
 80025b2:	4640      	mov	r0, r8
 80025b4:	4649      	mov	r1, r9
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	014b      	lsls	r3, r1, #5
 80025c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025c4:	0142      	lsls	r2, r0, #5
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	ebb0 0008 	subs.w	r0, r0, r8
 80025ce:	eb61 0109 	sbc.w	r1, r1, r9
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	018b      	lsls	r3, r1, #6
 80025dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025e0:	0182      	lsls	r2, r0, #6
 80025e2:	1a12      	subs	r2, r2, r0
 80025e4:	eb63 0301 	sbc.w	r3, r3, r1
 80025e8:	f04f 0000 	mov.w	r0, #0
 80025ec:	f04f 0100 	mov.w	r1, #0
 80025f0:	00d9      	lsls	r1, r3, #3
 80025f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025f6:	00d0      	lsls	r0, r2, #3
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	eb12 0208 	adds.w	r2, r2, r8
 8002600:	eb43 0309 	adc.w	r3, r3, r9
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	0259      	lsls	r1, r3, #9
 800260e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002612:	0250      	lsls	r0, r2, #9
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	f7fd fdd6 	bl	80001d4 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e04a      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	461a      	mov	r2, r3
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	ea02 0400 	and.w	r4, r2, r0
 800264a:	ea03 0501 	and.w	r5, r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	014b      	lsls	r3, r1, #5
 800265c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002660:	0142      	lsls	r2, r0, #5
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	1b00      	subs	r0, r0, r4
 8002668:	eb61 0105 	sbc.w	r1, r1, r5
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	018b      	lsls	r3, r1, #6
 8002676:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800267a:	0182      	lsls	r2, r0, #6
 800267c:	1a12      	subs	r2, r2, r0
 800267e:	eb63 0301 	sbc.w	r3, r3, r1
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	00d9      	lsls	r1, r3, #3
 800268c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002690:	00d0      	lsls	r0, r2, #3
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	1912      	adds	r2, r2, r4
 8002698:	eb45 0303 	adc.w	r3, r5, r3
 800269c:	f04f 0000 	mov.w	r0, #0
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	0299      	lsls	r1, r3, #10
 80026a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026aa:	0290      	lsls	r0, r2, #10
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	f7fd fd8a 	bl	80001d4 <__aeabi_uldivmod>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4613      	mov	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	60bb      	str	r3, [r7, #8]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026e6:	60bb      	str	r3, [r7, #8]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	68bb      	ldr	r3, [r7, #8]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	08003b7c 	.word	0x08003b7c

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffdc 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08003b7c 	.word	0x08003b7c

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fc82 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 fbf0 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e041      	b.n	80028a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d106      	bne.n	8002836 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fe fbd7 	bl	8000fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f000 fba1 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_TIM_PWM_Start+0x24>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e022      	b.n	8002912 <HAL_TIM_PWM_Start+0x6a>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d109      	bne.n	80028e6 <HAL_TIM_PWM_Start+0x3e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	e015      	b.n	8002912 <HAL_TIM_PWM_Start+0x6a>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d109      	bne.n	8002900 <HAL_TIM_PWM_Start+0x58>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e008      	b.n	8002912 <HAL_TIM_PWM_Start+0x6a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e068      	b.n	80029ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_TIM_PWM_Start+0x82>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002928:	e013      	b.n	8002952 <HAL_TIM_PWM_Start+0xaa>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d104      	bne.n	800293a <HAL_TIM_PWM_Start+0x92>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002938:	e00b      	b.n	8002952 <HAL_TIM_PWM_Start+0xaa>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d104      	bne.n	800294a <HAL_TIM_PWM_Start+0xa2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002948:	e003      	b.n	8002952 <HAL_TIM_PWM_Start+0xaa>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	6839      	ldr	r1, [r7, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fdbe 	bl	80034dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <HAL_TIM_PWM_Start+0x14c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d107      	bne.n	800297a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_TIM_PWM_Start+0x14c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d018      	beq.n	80029b6 <HAL_TIM_PWM_Start+0x10e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d013      	beq.n	80029b6 <HAL_TIM_PWM_Start+0x10e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_TIM_PWM_Start+0x150>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_TIM_PWM_Start+0x10e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_TIM_PWM_Start+0x154>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_TIM_PWM_Start+0x10e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_TIM_PWM_Start+0x158>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_PWM_Start+0x10e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <HAL_TIM_PWM_Start+0x15c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d111      	bne.n	80029da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d010      	beq.n	80029ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	e007      	b.n	80029ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40010000 	.word	0x40010000
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800
 8002a00:	40000c00 	.word	0x40000c00
 8002a04:	40014000 	.word	0x40014000

08002a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0202 	mvn.w	r2, #2
 8002a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa81 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa73 	bl	8002f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa84 	bl	8002f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0204 	mvn.w	r2, #4
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa57 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa49 	bl	8002f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fa5a 	bl	8002f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0208 	mvn.w	r2, #8
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa2d 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa1f 	bl	8002f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fa30 	bl	8002f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0210 	mvn.w	r2, #16
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2208      	movs	r2, #8
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa03 	bl	8002f52 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f9f5 	bl	8002f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa06 	bl	8002f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0201 	mvn.w	r2, #1
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9cf 	bl	8002f2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fd82 	bl	80036bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9cb 	bl	8002f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0220 	mvn.w	r2, #32
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fd4c 	bl	80036a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0ae      	b.n	8002d94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	f200 809f 	bhi.w	8002d84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c81 	.word	0x08002c81
 8002c50:	08002d85 	.word	0x08002d85
 8002c54:	08002d85 	.word	0x08002d85
 8002c58:	08002d85 	.word	0x08002d85
 8002c5c:	08002cc1 	.word	0x08002cc1
 8002c60:	08002d85 	.word	0x08002d85
 8002c64:	08002d85 	.word	0x08002d85
 8002c68:	08002d85 	.word	0x08002d85
 8002c6c:	08002d03 	.word	0x08002d03
 8002c70:	08002d85 	.word	0x08002d85
 8002c74:	08002d85 	.word	0x08002d85
 8002c78:	08002d85 	.word	0x08002d85
 8002c7c:	08002d43 	.word	0x08002d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fa02 	bl	8003090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0208 	orr.w	r2, r2, #8
 8002c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6999      	ldr	r1, [r3, #24]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	619a      	str	r2, [r3, #24]
      break;
 8002cbe:	e064      	b.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fa48 	bl	800315c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	021a      	lsls	r2, r3, #8
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	619a      	str	r2, [r3, #24]
      break;
 8002d00:	e043      	b.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fa93 	bl	8003234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0208 	orr.w	r2, r2, #8
 8002d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0204 	bic.w	r2, r2, #4
 8002d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69d9      	ldr	r1, [r3, #28]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	61da      	str	r2, [r3, #28]
      break;
 8002d40:	e023      	b.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fadd 	bl	8003308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69d9      	ldr	r1, [r3, #28]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	021a      	lsls	r2, r3, #8
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	61da      	str	r2, [r3, #28]
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
      break;
 8002d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_ConfigClockSource+0x1c>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0b4      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x186>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xd4>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	f000 8086 	beq.w	8002f0e <HAL_TIM_ConfigClockSource+0x172>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xa6>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b60      	cmp	r3, #96	; 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x11a>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b50      	cmp	r3, #80	; 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xfa>
 8002e1c:	2b50      	cmp	r3, #80	; 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x13a>
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e2c:	2b30      	cmp	r3, #48	; 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f000 fb23 	bl	800349c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04f      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f000 fb0c 	bl	800349c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 fa80 	bl	80033a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	; 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fad9 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 fa9f 	bl	8003406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	; 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fac9 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 fa60 	bl	80033a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fab9 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 fab0 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 8002f06:	e003      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a34      	ldr	r2, [pc, #208]	; (8003074 <TIM_Base_SetConfig+0xe4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00f      	beq.n	8002fc8 <TIM_Base_SetConfig+0x38>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fae:	d00b      	beq.n	8002fc8 <TIM_Base_SetConfig+0x38>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a31      	ldr	r2, [pc, #196]	; (8003078 <TIM_Base_SetConfig+0xe8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d007      	beq.n	8002fc8 <TIM_Base_SetConfig+0x38>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <TIM_Base_SetConfig+0xec>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0x38>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <TIM_Base_SetConfig+0xf0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d108      	bne.n	8002fda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a25      	ldr	r2, [pc, #148]	; (8003074 <TIM_Base_SetConfig+0xe4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01b      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d017      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <TIM_Base_SetConfig+0xe8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a21      	ldr	r2, [pc, #132]	; (800307c <TIM_Base_SetConfig+0xec>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00f      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a20      	ldr	r2, [pc, #128]	; (8003080 <TIM_Base_SetConfig+0xf0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <TIM_Base_SetConfig+0xf4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <TIM_Base_SetConfig+0xf8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <TIM_Base_SetConfig+0xfc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <TIM_Base_SetConfig+0xe4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40010000 	.word	0x40010000
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800
 8003080:	40000c00 	.word	0x40000c00
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800

08003090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <TIM_OC1_SetConfig+0xc8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10c      	bne.n	8003106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0308 	bic.w	r3, r3, #8
 80030f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a13      	ldr	r2, [pc, #76]	; (8003158 <TIM_OC1_SetConfig+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d111      	bne.n	8003132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800311c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40010000 	.word	0x40010000

0800315c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0320 	bic.w	r3, r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <TIM_OC2_SetConfig+0xd4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10d      	bne.n	80031d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <TIM_OC2_SetConfig+0xd4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d113      	bne.n	8003208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000

08003234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <TIM_OC3_SetConfig+0xd0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10d      	bne.n	80032ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <TIM_OC3_SetConfig+0xd0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d113      	bne.n	80032de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40010000 	.word	0x40010000

08003308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	031b      	lsls	r3, r3, #12
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <TIM_OC4_SetConfig+0x9c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d109      	bne.n	800337c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0210 	bic.w	r2, r3, #16
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 0307 	orr.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	021a      	lsls	r2, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2201      	movs	r2, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1a      	ldr	r2, [r3, #32]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e050      	b.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d013      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10c      	bne.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40014000 	.word	0x40014000

08003604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e03d      	b.n	800369c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e03f      	b.n	8003762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd fdc4 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f829 	bl	800376c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	b09f      	sub	sp, #124	; 0x7c
 8003772:	af00      	add	r7, sp, #0
 8003774:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	68d9      	ldr	r1, [r3, #12]
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	ea40 0301 	orr.w	r3, r0, r1
 800378c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	431a      	orrs	r2, r3
 800379e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037b0:	f021 010c 	bic.w	r1, r1, #12
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	6999      	ldr	r1, [r3, #24]
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	ea40 0301 	orr.w	r3, r0, r1
 80037d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4bc5      	ldr	r3, [pc, #788]	; (8003af0 <UART_SetConfig+0x384>)
 80037dc:	429a      	cmp	r2, r3
 80037de:	d004      	beq.n	80037ea <UART_SetConfig+0x7e>
 80037e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4bc3      	ldr	r3, [pc, #780]	; (8003af4 <UART_SetConfig+0x388>)
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d103      	bne.n	80037f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ea:	f7fe ffab 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 80037ee:	6778      	str	r0, [r7, #116]	; 0x74
 80037f0:	e002      	b.n	80037f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037f2:	f7fe ff93 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80037f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003800:	f040 80b6 	bne.w	8003970 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003806:	461c      	mov	r4, r3
 8003808:	f04f 0500 	mov.w	r5, #0
 800380c:	4622      	mov	r2, r4
 800380e:	462b      	mov	r3, r5
 8003810:	1891      	adds	r1, r2, r2
 8003812:	6439      	str	r1, [r7, #64]	; 0x40
 8003814:	415b      	adcs	r3, r3
 8003816:	647b      	str	r3, [r7, #68]	; 0x44
 8003818:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800381c:	1912      	adds	r2, r2, r4
 800381e:	eb45 0303 	adc.w	r3, r5, r3
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	00d9      	lsls	r1, r3, #3
 800382c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003830:	00d0      	lsls	r0, r2, #3
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	1911      	adds	r1, r2, r4
 8003838:	6639      	str	r1, [r7, #96]	; 0x60
 800383a:	416b      	adcs	r3, r5
 800383c:	667b      	str	r3, [r7, #100]	; 0x64
 800383e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	461a      	mov	r2, r3
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	1891      	adds	r1, r2, r2
 800384a:	63b9      	str	r1, [r7, #56]	; 0x38
 800384c:	415b      	adcs	r3, r3
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003854:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003858:	f7fc fcbc 	bl	80001d4 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4ba5      	ldr	r3, [pc, #660]	; (8003af8 <UART_SetConfig+0x38c>)
 8003862:	fba3 2302 	umull	r2, r3, r3, r2
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	011e      	lsls	r6, r3, #4
 800386a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386c:	461c      	mov	r4, r3
 800386e:	f04f 0500 	mov.w	r5, #0
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	1891      	adds	r1, r2, r2
 8003878:	6339      	str	r1, [r7, #48]	; 0x30
 800387a:	415b      	adcs	r3, r3
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
 800387e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003882:	1912      	adds	r2, r2, r4
 8003884:	eb45 0303 	adc.w	r3, r5, r3
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	00d9      	lsls	r1, r3, #3
 8003892:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003896:	00d0      	lsls	r0, r2, #3
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	1911      	adds	r1, r2, r4
 800389e:	65b9      	str	r1, [r7, #88]	; 0x58
 80038a0:	416b      	adcs	r3, r5
 80038a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80038b2:	415b      	adcs	r3, r3
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038be:	f7fc fc89 	bl	80001d4 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <UART_SetConfig+0x38c>)
 80038c8:	fba3 1302 	umull	r1, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	2164      	movs	r1, #100	; 0x64
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	3332      	adds	r3, #50	; 0x32
 80038da:	4a87      	ldr	r2, [pc, #540]	; (8003af8 <UART_SetConfig+0x38c>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e8:	441e      	add	r6, r3
 80038ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ec:	4618      	mov	r0, r3
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	1894      	adds	r4, r2, r2
 80038f8:	623c      	str	r4, [r7, #32]
 80038fa:	415b      	adcs	r3, r3
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003902:	1812      	adds	r2, r2, r0
 8003904:	eb41 0303 	adc.w	r3, r1, r3
 8003908:	f04f 0400 	mov.w	r4, #0
 800390c:	f04f 0500 	mov.w	r5, #0
 8003910:	00dd      	lsls	r5, r3, #3
 8003912:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003916:	00d4      	lsls	r4, r2, #3
 8003918:	4622      	mov	r2, r4
 800391a:	462b      	mov	r3, r5
 800391c:	1814      	adds	r4, r2, r0
 800391e:	653c      	str	r4, [r7, #80]	; 0x50
 8003920:	414b      	adcs	r3, r1
 8003922:	657b      	str	r3, [r7, #84]	; 0x54
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	461a      	mov	r2, r3
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	1891      	adds	r1, r2, r2
 8003930:	61b9      	str	r1, [r7, #24]
 8003932:	415b      	adcs	r3, r3
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800393a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800393e:	f7fc fc49 	bl	80001d4 <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <UART_SetConfig+0x38c>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	; 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <UART_SetConfig+0x38c>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 0207 	and.w	r2, r3, #7
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4432      	add	r2, r6
 800396c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800396e:	e0b9      	b.n	8003ae4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003972:	461c      	mov	r4, r3
 8003974:	f04f 0500 	mov.w	r5, #0
 8003978:	4622      	mov	r2, r4
 800397a:	462b      	mov	r3, r5
 800397c:	1891      	adds	r1, r2, r2
 800397e:	6139      	str	r1, [r7, #16]
 8003980:	415b      	adcs	r3, r3
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003988:	1912      	adds	r2, r2, r4
 800398a:	eb45 0303 	adc.w	r3, r5, r3
 800398e:	f04f 0000 	mov.w	r0, #0
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	00d9      	lsls	r1, r3, #3
 8003998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800399c:	00d0      	lsls	r0, r2, #3
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	eb12 0804 	adds.w	r8, r2, r4
 80039a6:	eb43 0905 	adc.w	r9, r3, r5
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	008b      	lsls	r3, r1, #2
 80039be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039c2:	0082      	lsls	r2, r0, #2
 80039c4:	4640      	mov	r0, r8
 80039c6:	4649      	mov	r1, r9
 80039c8:	f7fc fc04 	bl	80001d4 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <UART_SetConfig+0x38c>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011e      	lsls	r6, r3, #4
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	4618      	mov	r0, r3
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	1894      	adds	r4, r2, r2
 80039e8:	60bc      	str	r4, [r7, #8]
 80039ea:	415b      	adcs	r3, r3
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039f2:	1812      	adds	r2, r2, r0
 80039f4:	eb41 0303 	adc.w	r3, r1, r3
 80039f8:	f04f 0400 	mov.w	r4, #0
 80039fc:	f04f 0500 	mov.w	r5, #0
 8003a00:	00dd      	lsls	r5, r3, #3
 8003a02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a06:	00d4      	lsls	r4, r2, #3
 8003a08:	4622      	mov	r2, r4
 8003a0a:	462b      	mov	r3, r5
 8003a0c:	1814      	adds	r4, r2, r0
 8003a0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a10:	414b      	adcs	r3, r1
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	008b      	lsls	r3, r1, #2
 8003a28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a2c:	0082      	lsls	r2, r0, #2
 8003a2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a32:	f7fc fbcf 	bl	80001d4 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <UART_SetConfig+0x38c>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	; (8003af8 <UART_SetConfig+0x38c>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5a:	441e      	add	r6, r3
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	1894      	adds	r4, r2, r2
 8003a6a:	603c      	str	r4, [r7, #0]
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a74:	1812      	adds	r2, r2, r0
 8003a76:	eb41 0303 	adc.w	r3, r1, r3
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	f04f 0500 	mov.w	r5, #0
 8003a82:	00dd      	lsls	r5, r3, #3
 8003a84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a88:	00d4      	lsls	r4, r2, #3
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	eb12 0a00 	adds.w	sl, r2, r0
 8003a92:	eb43 0b01 	adc.w	fp, r3, r1
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	008b      	lsls	r3, r1, #2
 8003aaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003aae:	0082      	lsls	r2, r0, #2
 8003ab0:	4650      	mov	r0, sl
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	f7fc fb8e 	bl	80001d4 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <UART_SetConfig+0x38c>)
 8003abe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2164      	movs	r1, #100	; 0x64
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	3332      	adds	r3, #50	; 0x32
 8003ad0:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <UART_SetConfig+0x38c>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	f003 020f 	and.w	r2, r3, #15
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4432      	add	r2, r6
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	377c      	adds	r7, #124	; 0x7c
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aee:	bf00      	nop
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	51eb851f 	.word	0x51eb851f

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4d0d      	ldr	r5, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1b64      	subs	r4, r4, r5
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2600      	movs	r6, #0
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4d0b      	ldr	r5, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 f820 	bl	8003b54 <_init>
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2600      	movs	r6, #0
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003b8c 	.word	0x08003b8c
 8003b38:	08003b8c 	.word	0x08003b8c
 8003b3c:	08003b8c 	.word	0x08003b8c
 8003b40:	08003b90 	.word	0x08003b90

08003b44 <memset>:
 8003b44:	4402      	add	r2, r0
 8003b46:	4603      	mov	r3, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
