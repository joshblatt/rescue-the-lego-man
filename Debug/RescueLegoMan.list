
RescueLegoMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006120  08006120  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006128  08006128  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000010  08006140  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08006140  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137e7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266c  00000000  00000000  00033827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00035e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00036f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f7  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141c3  00000000  00000000  0004f05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901cf  00000000  00000000  00063222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f33f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  000f3444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080060e8 	.word	0x080060e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080060e8 	.word	0x080060e8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_uldivmod>:
 8000a10:	b953      	cbnz	r3, 8000a28 <__aeabi_uldivmod+0x18>
 8000a12:	b94a      	cbnz	r2, 8000a28 <__aeabi_uldivmod+0x18>
 8000a14:	2900      	cmp	r1, #0
 8000a16:	bf08      	it	eq
 8000a18:	2800      	cmpeq	r0, #0
 8000a1a:	bf1c      	itt	ne
 8000a1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a24:	f000 b96e 	b.w	8000d04 <__aeabi_idiv0>
 8000a28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a30:	f000 f806 	bl	8000a40 <__udivmoddi4>
 8000a34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a3c:	b004      	add	sp, #16
 8000a3e:	4770      	bx	lr

08000a40 <__udivmoddi4>:
 8000a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a44:	9d08      	ldr	r5, [sp, #32]
 8000a46:	4604      	mov	r4, r0
 8000a48:	468c      	mov	ip, r1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f040 8083 	bne.w	8000b56 <__udivmoddi4+0x116>
 8000a50:	428a      	cmp	r2, r1
 8000a52:	4617      	mov	r7, r2
 8000a54:	d947      	bls.n	8000ae6 <__udivmoddi4+0xa6>
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	b142      	cbz	r2, 8000a6e <__udivmoddi4+0x2e>
 8000a5c:	f1c2 0020 	rsb	r0, r2, #32
 8000a60:	fa24 f000 	lsr.w	r0, r4, r0
 8000a64:	4091      	lsls	r1, r2
 8000a66:	4097      	lsls	r7, r2
 8000a68:	ea40 0c01 	orr.w	ip, r0, r1
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a72:	0c23      	lsrs	r3, r4, #16
 8000a74:	fbbc f6f8 	udiv	r6, ip, r8
 8000a78:	fa1f fe87 	uxth.w	lr, r7
 8000a7c:	fb08 c116 	mls	r1, r8, r6, ip
 8000a80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a84:	fb06 f10e 	mul.w	r1, r6, lr
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d909      	bls.n	8000aa0 <__udivmoddi4+0x60>
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a92:	f080 8119 	bcs.w	8000cc8 <__udivmoddi4+0x288>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 8116 	bls.w	8000cc8 <__udivmoddi4+0x288>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	443b      	add	r3, r7
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab4:	45a6      	cmp	lr, r4
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x8c>
 8000ab8:	193c      	adds	r4, r7, r4
 8000aba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000abe:	f080 8105 	bcs.w	8000ccc <__udivmoddi4+0x28c>
 8000ac2:	45a6      	cmp	lr, r4
 8000ac4:	f240 8102 	bls.w	8000ccc <__udivmoddi4+0x28c>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	443c      	add	r4, r7
 8000acc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad0:	eba4 040e 	sub.w	r4, r4, lr
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa0>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	b902      	cbnz	r2, 8000aea <__udivmoddi4+0xaa>
 8000ae8:	deff      	udf	#255	; 0xff
 8000aea:	fab2 f282 	clz	r2, r2
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d150      	bne.n	8000b94 <__udivmoddi4+0x154>
 8000af2:	1bcb      	subs	r3, r1, r7
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f f887 	uxth.w	r8, r7
 8000afc:	2601      	movs	r6, #1
 8000afe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b02:	0c21      	lsrs	r1, r4, #16
 8000b04:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0c:	fb08 f30c 	mul.w	r3, r8, ip
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d907      	bls.n	8000b24 <__udivmoddi4+0xe4>
 8000b14:	1879      	adds	r1, r7, r1
 8000b16:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0xe2>
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	f200 80e9 	bhi.w	8000cf4 <__udivmoddi4+0x2b4>
 8000b22:	4684      	mov	ip, r0
 8000b24:	1ac9      	subs	r1, r1, r3
 8000b26:	b2a3      	uxth	r3, r4
 8000b28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b2c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b30:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b34:	fb08 f800 	mul.w	r8, r8, r0
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	d907      	bls.n	8000b4c <__udivmoddi4+0x10c>
 8000b3c:	193c      	adds	r4, r7, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x10a>
 8000b44:	45a0      	cmp	r8, r4
 8000b46:	f200 80d9 	bhi.w	8000cfc <__udivmoddi4+0x2bc>
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	eba4 0408 	sub.w	r4, r4, r8
 8000b50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b54:	e7bf      	b.n	8000ad6 <__udivmoddi4+0x96>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0x12e>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80b1 	beq.w	8000cc2 <__udivmoddi4+0x282>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x1cc>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0x140>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80b8 	bhi.w	8000cf0 <__udivmoddi4+0x2b0>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0103 	sbc.w	r1, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	468c      	mov	ip, r1
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0a8      	beq.n	8000ae0 <__udivmoddi4+0xa0>
 8000b8e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0xa0>
 8000b94:	f1c2 0320 	rsb	r3, r2, #32
 8000b98:	fa20 f603 	lsr.w	r6, r0, r3
 8000b9c:	4097      	lsls	r7, r2
 8000b9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ba2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba6:	40d9      	lsrs	r1, r3
 8000ba8:	4330      	orrs	r0, r6
 8000baa:	0c03      	lsrs	r3, r0, #16
 8000bac:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bb0:	fa1f f887 	uxth.w	r8, r7
 8000bb4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbc:	fb06 f108 	mul.w	r1, r6, r8
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x19c>
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bce:	f080 808d 	bcs.w	8000cec <__udivmoddi4+0x2ac>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 808a 	bls.w	8000cec <__udivmoddi4+0x2ac>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	443b      	add	r3, r7
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b281      	uxth	r1, r0
 8000be0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb00 f308 	mul.w	r3, r0, r8
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0x1c4>
 8000bf4:	1879      	adds	r1, r7, r1
 8000bf6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bfa:	d273      	bcs.n	8000ce4 <__udivmoddi4+0x2a4>
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d971      	bls.n	8000ce4 <__udivmoddi4+0x2a4>
 8000c00:	3802      	subs	r0, #2
 8000c02:	4439      	add	r1, r7
 8000c04:	1acb      	subs	r3, r1, r3
 8000c06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c0a:	e778      	b.n	8000afe <__udivmoddi4+0xbe>
 8000c0c:	f1c6 0c20 	rsb	ip, r6, #32
 8000c10:	fa03 f406 	lsl.w	r4, r3, r6
 8000c14:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c26:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c2a:	431f      	orrs	r7, r3
 8000c2c:	0c3b      	lsrs	r3, r7, #16
 8000c2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c32:	fa1f f884 	uxth.w	r8, r4
 8000c36:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3e:	fb09 fa08 	mul.w	sl, r9, r8
 8000c42:	458a      	cmp	sl, r1
 8000c44:	fa02 f206 	lsl.w	r2, r2, r6
 8000c48:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x220>
 8000c4e:	1861      	adds	r1, r4, r1
 8000c50:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c54:	d248      	bcs.n	8000ce8 <__udivmoddi4+0x2a8>
 8000c56:	458a      	cmp	sl, r1
 8000c58:	d946      	bls.n	8000ce8 <__udivmoddi4+0x2a8>
 8000c5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5e:	4421      	add	r1, r4
 8000c60:	eba1 010a 	sub.w	r1, r1, sl
 8000c64:	b2bf      	uxth	r7, r7
 8000c66:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c72:	fb00 f808 	mul.w	r8, r0, r8
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x24a>
 8000c7a:	19e7      	adds	r7, r4, r7
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c80:	d22e      	bcs.n	8000ce0 <__udivmoddi4+0x2a0>
 8000c82:	45b8      	cmp	r8, r7
 8000c84:	d92c      	bls.n	8000ce0 <__udivmoddi4+0x2a0>
 8000c86:	3802      	subs	r0, #2
 8000c88:	4427      	add	r7, r4
 8000c8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8e:	eba7 0708 	sub.w	r7, r7, r8
 8000c92:	fba0 8902 	umull	r8, r9, r0, r2
 8000c96:	454f      	cmp	r7, r9
 8000c98:	46c6      	mov	lr, r8
 8000c9a:	4649      	mov	r1, r9
 8000c9c:	d31a      	bcc.n	8000cd4 <__udivmoddi4+0x294>
 8000c9e:	d017      	beq.n	8000cd0 <__udivmoddi4+0x290>
 8000ca0:	b15d      	cbz	r5, 8000cba <__udivmoddi4+0x27a>
 8000ca2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca6:	eb67 0701 	sbc.w	r7, r7, r1
 8000caa:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cae:	40f2      	lsrs	r2, r6
 8000cb0:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb4:	40f7      	lsrs	r7, r6
 8000cb6:	e9c5 2700 	strd	r2, r7, [r5]
 8000cba:	2600      	movs	r6, #0
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	462e      	mov	r6, r5
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	e70b      	b.n	8000ae0 <__udivmoddi4+0xa0>
 8000cc8:	4606      	mov	r6, r0
 8000cca:	e6e9      	b.n	8000aa0 <__udivmoddi4+0x60>
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e6fd      	b.n	8000acc <__udivmoddi4+0x8c>
 8000cd0:	4543      	cmp	r3, r8
 8000cd2:	d2e5      	bcs.n	8000ca0 <__udivmoddi4+0x260>
 8000cd4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd8:	eb69 0104 	sbc.w	r1, r9, r4
 8000cdc:	3801      	subs	r0, #1
 8000cde:	e7df      	b.n	8000ca0 <__udivmoddi4+0x260>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e7d2      	b.n	8000c8a <__udivmoddi4+0x24a>
 8000ce4:	4660      	mov	r0, ip
 8000ce6:	e78d      	b.n	8000c04 <__udivmoddi4+0x1c4>
 8000ce8:	4681      	mov	r9, r0
 8000cea:	e7b9      	b.n	8000c60 <__udivmoddi4+0x220>
 8000cec:	4666      	mov	r6, ip
 8000cee:	e775      	b.n	8000bdc <__udivmoddi4+0x19c>
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	e74a      	b.n	8000b8a <__udivmoddi4+0x14a>
 8000cf4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf8:	4439      	add	r1, r7
 8000cfa:	e713      	b.n	8000b24 <__udivmoddi4+0xe4>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	443c      	add	r4, r7
 8000d00:	e724      	b.n	8000b4c <__udivmoddi4+0x10c>
 8000d02:	bf00      	nop

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <init>:

// 3rd Movement Phase: Return to home
// Robot moves until it finds red perpendicular line (double red)
// Stop motors at red

void init(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim4) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
	  initMotors(htim1, htim3);
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f001 faa9 	bl	8002270 <initMotors>
	  initServo(htim2);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f001 fc7a 	bl	8002618 <initServo>
	  initColourSensors(htim4);
 8000d24:	6838      	ldr	r0, [r7, #0]
 8000d26:	f000 fb7f 	bl	8001428 <initColourSensors>
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <movement>:

volatile Colour leftColour = NO_COLOUR;
volatile Colour rightColour = NO_COLOUR;

void movement(Colour stopColour) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	// need to test if condition will break at any unintended time
	// need to test if params (left/right color, left/right slowed) carry over (pass as copy or pass with address thing)

	bool condition = true;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
	bool turn = false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73bb      	strb	r3, [r7, #14]

	rightColour = getRightColour();
 8000d46:	f000 fdbb 	bl	80018c0 <getRightColour>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <movement+0x11c>)
 8000d50:	701a      	strb	r2, [r3, #0]
	leftColour = getLeftColour();
 8000d52:	f000 fe07 	bl	8001964 <getLeftColour>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <movement+0x120>)
 8000d5c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f002 f858 	bl	8002e14 <HAL_Delay>
	while (condition) {
 8000d64:	e06b      	b.n	8000e3e <movement+0x10a>
		// turn speedleft/right and regleft/right into one function
		//



		leftColour = getLeftColour();
 8000d66:	f000 fdfd 	bl	8001964 <getLeftColour>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <movement+0x120>)
 8000d70:	701a      	strb	r2, [r3, #0]
		rightColour = getRightColour();
 8000d72:	f000 fda5 	bl	80018c0 <getRightColour>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <movement+0x11c>)
 8000d7c:	701a      	strb	r2, [r3, #0]

		// turning conditions
		if (leftColour == RED || rightColour == RED)	{
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <movement+0x120>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <movement+0x5e>
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <movement+0x11c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d126      	bne.n	8000de0 <movement+0xac>
			// only stop motors if it hasnt started turn yet
			// room for error with this - not sure how fast it can switch from turning left to turning right or from turn to straight
			// valid option to stop after each micro-turn - initial implementation is to stop, turn a bit, stop, turn a bit until turn is complete
			// optimistic goal is to not stop after each micro-turn - turn, turn again, turn again, etc. until turn complete

			if (!turn) {
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <movement+0x7c>
				stopMotors();
 8000d9e:	f001 fb7b 	bl	8002498 <stopMotors>
				speedLeftMotors();
 8000da2:	f001 fc0b 	bl	80025bc <speedLeftMotors>
				speedRightMotors();
 8000da6:	f001 fc21 	bl	80025ec <speedRightMotors>
				HAL_Delay(40);
 8000daa:	2028      	movs	r0, #40	; 0x28
 8000dac:	f002 f832 	bl	8002e14 <HAL_Delay>
			}
			if (leftColour == RED) {
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <movement+0x120>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <movement+0x92>
				turnLeft();
 8000dba:	f001 fb37 	bl	800242c <turnLeft>
				HAL_Delay(40);
 8000dbe:	2028      	movs	r0, #40	; 0x28
 8000dc0:	f002 f828 	bl	8002e14 <HAL_Delay>
 8000dc4:	e009      	b.n	8000dda <movement+0xa6>
			}
			else if (rightColour == RED) {
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <movement+0x11c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d104      	bne.n	8000dda <movement+0xa6>
				turnRight();
 8000dd0:	f001 faf6 	bl	80023c0 <turnRight>
				HAL_Delay(40);
 8000dd4:	2028      	movs	r0, #40	; 0x28
 8000dd6:	f002 f81d 	bl	8002e14 <HAL_Delay>
			}
			turn = true;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73bb      	strb	r3, [r7, #14]
 8000dde:	e00d      	b.n	8000dfc <movement+0xc8>
		}
		// coming out of turn - reset motors to regular speed, change bool to false to signify that turn its not in turn
		else {
			if (turn) {
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00a      	beq.n	8000dfc <movement+0xc8>
				regularLeftMotors();
 8000de6:	f001 fbbb 	bl	8002560 <regularLeftMotors>
				regularRightMotors();
 8000dea:	f001 fbd1 	bl	8002590 <regularRightMotors>
				moveForwards();
 8000dee:	f001 fa7b 	bl	80022e8 <moveForwards>
				HAL_Delay(40);
 8000df2:	2028      	movs	r0, #40	; 0x28
 8000df4:	f002 f80e 	bl	8002e14 <HAL_Delay>
				turn = false;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73bb      	strb	r3, [r7, #14]
			}
		}

		if (stopColour == GREEN) condition = rightColour != stopColour;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d109      	bne.n	8000e16 <movement+0xe2>
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <movement+0x11c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e013      	b.n	8000e3e <movement+0x10a>
		else condition = leftColour != stopColour || rightColour != stopColour;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <movement+0x120>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d105      	bne.n	8000e2e <movement+0xfa>
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <movement+0x11c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d001      	beq.n	8000e32 <movement+0xfe>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <movement+0x100>
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
	while (condition) {
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d190      	bne.n	8000d66 <movement+0x32>

	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000001 	.word	0x20000001
 8000e54:	20000000 	.word	0x20000000

08000e58 <pickup>:

void pickup() {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	stopMotors();
 8000e5e:	f001 fb1b 	bl	8002498 <stopMotors>
	startServo();
 8000e62:	f001 fc0d 	bl	8002680 <startServo>
	HAL_Delay(50);
 8000e66:	2032      	movs	r0, #50	; 0x32
 8000e68:	f001 ffd4 	bl	8002e14 <HAL_Delay>
	openServo();
 8000e6c:	f001 fbe8 	bl	8002640 <openServo>
	HAL_Delay(50);
 8000e70:	2032      	movs	r0, #50	; 0x32
 8000e72:	f001 ffcf 	bl	8002e14 <HAL_Delay>

	regularRightMotors();
 8000e76:	f001 fb8b 	bl	8002590 <regularRightMotors>
	regularLeftMotors();
 8000e7a:	f001 fb71 	bl	8002560 <regularLeftMotors>
	HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	; 0x32
 8000e80:	f001 ffc8 	bl	8002e14 <HAL_Delay>

	moveForwards();
 8000e84:	f001 fa30 	bl	80022e8 <moveForwards>
	HAL_Delay(50);
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f001 ffc3 	bl	8002e14 <HAL_Delay>

	bool bothRed = false;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
	// Follow line until both sensors see red
	while (!bothRed) {
 8000e92:	e04c      	b.n	8000f2e <pickup+0xd6>
		leftColour = getLeftColour();
 8000e94:	f000 fd66 	bl	8001964 <getLeftColour>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <pickup+0x130>)
 8000e9e:	701a      	strb	r2, [r3, #0]
		rightColour = getRightColour();
 8000ea0:	f000 fd0e 	bl	80018c0 <getRightColour>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <pickup+0x134>)
 8000eaa:	701a      	strb	r2, [r3, #0]

		if (leftColour == RED && rightColour != RED) {
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <pickup+0x130>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10f      	bne.n	8000ed6 <pickup+0x7e>
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <pickup+0x134>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00a      	beq.n	8000ed6 <pickup+0x7e>
			stopMotors();
 8000ec0:	f001 faea 	bl	8002498 <stopMotors>
			HAL_Delay(50);
 8000ec4:	2032      	movs	r0, #50	; 0x32
 8000ec6:	f001 ffa5 	bl	8002e14 <HAL_Delay>
			turnLeft();
 8000eca:	f001 faaf 	bl	800242c <turnLeft>
			HAL_Delay(40);
 8000ece:	2028      	movs	r0, #40	; 0x28
 8000ed0:	f001 ffa0 	bl	8002e14 <HAL_Delay>
 8000ed4:	e02b      	b.n	8000f2e <pickup+0xd6>
		} else if (leftColour != RED && rightColour == RED) {
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <pickup+0x130>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00f      	beq.n	8000f00 <pickup+0xa8>
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <pickup+0x134>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10a      	bne.n	8000f00 <pickup+0xa8>
			stopMotors();
 8000eea:	f001 fad5 	bl	8002498 <stopMotors>
			HAL_Delay(50);
 8000eee:	2032      	movs	r0, #50	; 0x32
 8000ef0:	f001 ff90 	bl	8002e14 <HAL_Delay>
			turnRight();
 8000ef4:	f001 fa64 	bl	80023c0 <turnRight>
			HAL_Delay(40);
 8000ef8:	2028      	movs	r0, #40	; 0x28
 8000efa:	f001 ff8b 	bl	8002e14 <HAL_Delay>
 8000efe:	e016      	b.n	8000f2e <pickup+0xd6>
		} else if (leftColour == RED && rightColour == RED) {
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <pickup+0x130>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d107      	bne.n	8000f1a <pickup+0xc2>
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <pickup+0x134>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <pickup+0xc2>
			bothRed = true;
 8000f14:	2301      	movs	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	e009      	b.n	8000f2e <pickup+0xd6>
		} else {
			stopMotors();
 8000f1a:	f001 fabd 	bl	8002498 <stopMotors>
			HAL_Delay(50);
 8000f1e:	2032      	movs	r0, #50	; 0x32
 8000f20:	f001 ff78 	bl	8002e14 <HAL_Delay>
			moveForwards();
 8000f24:	f001 f9e0 	bl	80022e8 <moveForwards>
			HAL_Delay(40);
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	f001 ff73 	bl	8002e14 <HAL_Delay>
	while (!bothRed) {
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1ac      	bne.n	8000e94 <pickup+0x3c>
		}
	}
	// once they both see red, move forwards very slowly, close servo
	stopMotors();
 8000f3a:	f001 faad 	bl	8002498 <stopMotors>
	HAL_Delay(50);
 8000f3e:	2032      	movs	r0, #50	; 0x32
 8000f40:	f001 ff68 	bl	8002e14 <HAL_Delay>
	slowRightMotors();//slow
 8000f44:	f001 faf6 	bl	8002534 <slowRightMotors>
	slowLeftMotors();//slow
 8000f48:	f001 fadc 	bl	8002504 <slowLeftMotors>
	HAL_Delay(50);
 8000f4c:	2032      	movs	r0, #50	; 0x32
 8000f4e:	f001 ff61 	bl	8002e14 <HAL_Delay>
	moveForwards();
 8000f52:	f001 f9c9 	bl	80022e8 <moveForwards>
	HAL_Delay(500);
 8000f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5a:	f001 ff5b 	bl	8002e14 <HAL_Delay>
	stopMotors();
 8000f5e:	f001 fa9b 	bl	8002498 <stopMotors>
	HAL_Delay(50);
 8000f62:	2032      	movs	r0, #50	; 0x32
 8000f64:	f001 ff56 	bl	8002e14 <HAL_Delay>
	closeServo();
 8000f68:	f001 fb7a 	bl	8002660 <closeServo>
	HAL_Delay(300);
 8000f6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f70:	f001 ff50 	bl	8002e14 <HAL_Delay>
	stopServo();
 8000f74:	f001 fb90 	bl	8002698 <stopServo>
	HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f001 ff4b 	bl	8002e14 <HAL_Delay>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000001 	.word	0x20000001

08000f90 <turnAround>:

void turnAround() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	regularRightMotors();
 8000f94:	f001 fafc 	bl	8002590 <regularRightMotors>
	regularLeftMotors();
 8000f98:	f001 fae2 	bl	8002560 <regularLeftMotors>
	HAL_Delay(50);
 8000f9c:	2032      	movs	r0, #50	; 0x32
 8000f9e:	f001 ff39 	bl	8002e14 <HAL_Delay>
	moveBackwards();
 8000fa2:	f001 f9d7 	bl	8002354 <moveBackwards>
	HAL_Delay(600);
 8000fa6:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000faa:	f001 ff33 	bl	8002e14 <HAL_Delay>

	stopMotors();
 8000fae:	f001 fa73 	bl	8002498 <stopMotors>
	HAL_Delay(50);
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f001 ff2e 	bl	8002e14 <HAL_Delay>
	speedRightMotors();
 8000fb8:	f001 fb18 	bl	80025ec <speedRightMotors>
	speedLeftMotors();
 8000fbc:	f001 fafe 	bl	80025bc <speedLeftMotors>
	HAL_Delay(50);
 8000fc0:	2032      	movs	r0, #50	; 0x32
 8000fc2:	f001 ff27 	bl	8002e14 <HAL_Delay>
	turnRight();
 8000fc6:	f001 f9fb 	bl	80023c0 <turnRight>
	HAL_Delay(50);
 8000fca:	2032      	movs	r0, #50	; 0x32
 8000fcc:	f001 ff22 	bl	8002e14 <HAL_Delay>

	rightColour = getRightColour();
 8000fd0:	f000 fc76 	bl	80018c0 <getRightColour>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <turnAround+0xc4>)
 8000fda:	701a      	strb	r2, [r3, #0]
	leftColour = getLeftColour();
 8000fdc:	f000 fcc2 	bl	8001964 <getLeftColour>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <turnAround+0xc8>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000fe8:	2032      	movs	r0, #50	; 0x32
 8000fea:	f001 ff13 	bl	8002e14 <HAL_Delay>
//	rightColour = getRightColour();
//	leftColour = getLeftColour();
//	HAL_Delay(50);

	while (rightColour != RED) {
 8000fee:	e008      	b.n	8001002 <turnAround+0x72>
		HAL_Delay(40);
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f001 ff0f 	bl	8002e14 <HAL_Delay>
		rightColour = getRightColour();
 8000ff6:	f000 fc63 	bl	80018c0 <getRightColour>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <turnAround+0xc4>)
 8001000:	701a      	strb	r2, [r3, #0]
	while (rightColour != RED) {
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <turnAround+0xc4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f1      	bne.n	8000ff0 <turnAround+0x60>

	}
	leftColour = getLeftColour();
 800100c:	f000 fcaa 	bl	8001964 <getLeftColour>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <turnAround+0xc8>)
 8001016:	701a      	strb	r2, [r3, #0]
	while (leftColour != RED) {
 8001018:	e008      	b.n	800102c <turnAround+0x9c>
		HAL_Delay(40);
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f001 fefa 	bl	8002e14 <HAL_Delay>
		leftColour = getLeftColour();
 8001020:	f000 fca0 	bl	8001964 <getLeftColour>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <turnAround+0xc8>)
 800102a:	701a      	strb	r2, [r3, #0]
	while (leftColour != RED) {
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <turnAround+0xc8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f1      	bne.n	800101a <turnAround+0x8a>
	}
	stopMotors();
 8001036:	f001 fa2f 	bl	8002498 <stopMotors>
	HAL_Delay(50);
 800103a:	2032      	movs	r0, #50	; 0x32
 800103c:	f001 feea 	bl	8002e14 <HAL_Delay>
	regularRightMotors();
 8001040:	f001 faa6 	bl	8002590 <regularRightMotors>
	regularLeftMotors();
 8001044:	f001 fa8c 	bl	8002560 <regularLeftMotors>
	HAL_Delay(40);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f001 fee3 	bl	8002e14 <HAL_Delay>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000001 	.word	0x20000001
 8001058:	20000000 	.word	0x20000000

0800105c <goHome>:

	stopMotors();
	HAL_Delay(50);
}

void goHome(Colour stopColour) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	// need to test if condition will break at any unintended time
	// need to test if params (left/right color, left/right slowed) carry over (pass as copy or pass with address thing)

	bool condition = true;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
	bool turn = true;
 800106a:	2301      	movs	r3, #1
 800106c:	73bb      	strb	r3, [r7, #14]
	rightColour = getRightColour();
 800106e:	f000 fc27 	bl	80018c0 <getRightColour>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <goHome+0x148>)
 8001078:	701a      	strb	r2, [r3, #0]
	leftColour = getLeftColour();
 800107a:	f000 fc73 	bl	8001964 <getLeftColour>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <goHome+0x14c>)
 8001084:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8001086:	2032      	movs	r0, #50	; 0x32
 8001088:	f001 fec4 	bl	8002e14 <HAL_Delay>
	while (condition) {
 800108c:	e080      	b.n	8001190 <goHome+0x134>
		// turn speedleft/right and regleft/right into one function
		//



		leftColour = getLeftColour();
 800108e:	f000 fc69 	bl	8001964 <getLeftColour>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <goHome+0x14c>)
 8001098:	701a      	strb	r2, [r3, #0]
		rightColour = getRightColour();
 800109a:	f000 fc11 	bl	80018c0 <getRightColour>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <goHome+0x148>)
 80010a4:	701a      	strb	r2, [r3, #0]

		// turning conditions
		if ((leftColour == RED  && rightColour != RED ) || (rightColour == RED && leftColour != RED))	{
 80010a6:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <goHome+0x14c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <goHome+0x5e>
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <goHome+0x148>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <goHome+0x72>
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <goHome+0x148>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12b      	bne.n	800111c <goHome+0xc0>
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <goHome+0x14c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d026      	beq.n	800111c <goHome+0xc0>
			// only stop motors if it hasnt started turn yet
			// room for error with this - not sure how fast it can switch from turning left to turning right or from turn to straight
			// valid option to stop after each micro-turn - initial implementation is to stop, turn a bit, stop, turn a bit until turn is complete
			// optimistic goal is to not stop after each micro-turn - turn, turn again, turn again, etc. until turn complete

			if (!turn) {
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <goHome+0x90>
				stopMotors();
 80010da:	f001 f9dd 	bl	8002498 <stopMotors>
				speedLeftMotors();
 80010de:	f001 fa6d 	bl	80025bc <speedLeftMotors>
				speedRightMotors();
 80010e2:	f001 fa83 	bl	80025ec <speedRightMotors>
				HAL_Delay(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f001 fe94 	bl	8002e14 <HAL_Delay>
			}
			if (leftColour == RED) {
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <goHome+0x14c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <goHome+0xa6>
				turnLeft();
 80010f6:	f001 f999 	bl	800242c <turnLeft>
				HAL_Delay(50);
 80010fa:	2032      	movs	r0, #50	; 0x32
 80010fc:	f001 fe8a 	bl	8002e14 <HAL_Delay>
 8001100:	e009      	b.n	8001116 <goHome+0xba>
			}
			else if (rightColour == RED) {
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <goHome+0x148>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <goHome+0xba>
				turnRight();
 800110c:	f001 f958 	bl	80023c0 <turnRight>
				HAL_Delay(50);
 8001110:	2032      	movs	r0, #50	; 0x32
 8001112:	f001 fe7f 	bl	8002e14 <HAL_Delay>
			}
			turn = true;
 8001116:	2301      	movs	r3, #1
 8001118:	73bb      	strb	r3, [r7, #14]
 800111a:	e00d      	b.n	8001138 <goHome+0xdc>
		}
		// coming out of turn - reset motors to regular speed, change bool to false to signify that turn its not in turn
		else {
			if (turn) {
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00a      	beq.n	8001138 <goHome+0xdc>
				regularLeftMotors();
 8001122:	f001 fa1d 	bl	8002560 <regularLeftMotors>
				regularRightMotors();
 8001126:	f001 fa33 	bl	8002590 <regularRightMotors>
				moveForwards();
 800112a:	f001 f8dd 	bl	80022e8 <moveForwards>
				HAL_Delay(50);
 800112e:	2032      	movs	r0, #50	; 0x32
 8001130:	f001 fe70 	bl	8002e14 <HAL_Delay>
				turn = false;
 8001134:	2300      	movs	r3, #0
 8001136:	73bb      	strb	r3, [r7, #14]
			}
		}

		if (stopColour == GREEN) condition = leftColour != stopColour || rightColour != stopColour;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d114      	bne.n	8001168 <goHome+0x10c>
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <goHome+0x14c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	429a      	cmp	r2, r3
 8001148:	d105      	bne.n	8001156 <goHome+0xfa>
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <goHome+0x148>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	429a      	cmp	r2, r3
 8001154:	d001      	beq.n	800115a <goHome+0xfe>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <goHome+0x100>
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e013      	b.n	8001190 <goHome+0x134>
		else condition = leftColour != stopColour || rightColour != stopColour;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <goHome+0x14c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	79fa      	ldrb	r2, [r7, #7]
 8001170:	429a      	cmp	r2, r3
 8001172:	d105      	bne.n	8001180 <goHome+0x124>
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <goHome+0x148>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <goHome+0x128>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <goHome+0x12a>
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
	while (condition) {
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f af7b 	bne.w	800108e <goHome+0x32>

	}
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000001 	.word	0x20000001
 80011a8:	20000000 	.word	0x20000000

080011ac <searchAndRescue>:

void searchAndRescue()	{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
//		leftColour = getLeftColour();
//		rightColour = getRightColour();
//	}


	moveForwards();
 80011b0:	f001 f89a 	bl	80022e8 <moveForwards>
	movement(BLUE);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fdbd 	bl	8000d34 <movement>

	pickup();
 80011ba:	f7ff fe4d 	bl	8000e58 <pickup>
	turnAround();
 80011be:	f7ff fee7 	bl	8000f90 <turnAround>

//	movement(GREEN);
//	dropoff();

	moveForwards();
 80011c2:	f001 f891 	bl	80022e8 <moveForwards>
	HAL_Delay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f001 fe24 	bl	8002e14 <HAL_Delay>
	goHome(RED);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff45 	bl	800105c <goHome>
	stopMotors();
 80011d2:	f001 f961 	bl	8002498 <stopMotors>
	startServo();
 80011d6:	f001 fa53 	bl	8002680 <startServo>
	openServo();
 80011da:	f001 fa31 	bl	8002640 <openServo>
	HAL_Delay(300);
 80011de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011e2:	f001 fe17 	bl	8002e14 <HAL_Delay>
//
//	// move to home
//	moveForwards();
//	movement(RED);
//	stopMotors();
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_TIM_IC_CaptureCallback>:
volatile float frequencyLeft = 0;

volatile bool whiteBalance = false;
volatile bool darkColour = false;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == tim4->Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && startCaptureRight) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x204>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d175      	bne.n	80012ee <HAL_TIM_IC_CaptureCallback+0x102>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7f1b      	ldrb	r3, [r3, #28]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d171      	bne.n	80012ee <HAL_TIM_IC_CaptureCallback+0x102>
 800120a:	4b7a      	ldr	r3, [pc, #488]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d06d      	beq.n	80012ee <HAL_TIM_IC_CaptureCallback+0x102>
		if (!isFirstCapturedRight) {
 8001212:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10a      	bne.n	8001230 <HAL_TIM_IC_CaptureCallback+0x44>
			capturesRight[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800121a:	2104      	movs	r1, #4
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f003 fff7 	bl	8005210 <HAL_TIM_ReadCapturedValue>
 8001222:	4603      	mov	r3, r0
 8001224:	4a75      	ldr	r2, [pc, #468]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001226:	6013      	str	r3, [r2, #0]
			isFirstCapturedRight = true;
 8001228:	4b73      	ldr	r3, [pc, #460]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e05e      	b.n	80012ee <HAL_TIM_IC_CaptureCallback+0x102>
		} else {
			capturesRight[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001230:	2104      	movs	r1, #4
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f003 ffec 	bl	8005210 <HAL_TIM_ReadCapturedValue>
 8001238:	4603      	mov	r3, r0
 800123a:	4a70      	ldr	r2, [pc, #448]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 800123c:	6053      	str	r3, [r2, #4]

			if (capturesRight[1] >= capturesRight[0]) {
 800123e:	4b6f      	ldr	r3, [pc, #444]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d307      	bcc.n	800125a <HAL_TIM_IC_CaptureCallback+0x6e>
				diffCaptureRight = capturesRight[1] - capturesRight[0];
 800124a:	4b6c      	ldr	r3, [pc, #432]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e00b      	b.n	8001272 <HAL_TIM_IC_CaptureCallback+0x86>
			} else {
				diffCaptureRight = (htim->Instance->ARR - capturesRight[0]) + capturesRight[1] + 1;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1ad2      	subs	r2, r2, r3
 8001266:	4b65      	ldr	r3, [pc, #404]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4413      	add	r3, r2
 800126c:	3301      	adds	r3, #1
 800126e:	4a64      	ldr	r2, [pc, #400]	; (8001400 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001270:	6013      	str	r3, [r2, #0]
			}

			frequencyRight = HAL_RCC_GetPCLK1Freq() / (tim4->Instance->PSC + 1.0);
 8001272:	f003 f95b 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8001276:	4603      	mov	r3, r0
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f8ed 	bl	8000458 <__aeabi_ui2d>
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8e4 	bl	8000458 <__aeabi_ui2d>
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001296:	f7fe ffa3 	bl	80001e0 <__adddf3>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4620      	mov	r0, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	f7ff fa7d 	bl	80007a0 <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fb5f 	bl	8000970 <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a54      	ldr	r2, [pc, #336]	; (8001408 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80012b6:	6013      	str	r3, [r2, #0]
			frequencyRight = (float) frequencyRight / (float) diffCaptureRight;
 80012b8:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80012ba:	edd3 6a00 	vldr	s13, [r3]
 80012be:	4b50      	ldr	r3, [pc, #320]	; (8001400 <HAL_TIM_IC_CaptureCallback+0x214>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80012d0:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_COUNTER(htim, 0);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

			startCaptureRight = false;
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x208>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
			isFirstCapturedRight = false;
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
			captureDoneRight = true;
 80012e8:	4b48      	ldr	r3, [pc, #288]	; (800140c <HAL_TIM_IC_CaptureCallback+0x220>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

		}
	}
	if (htim->Instance == tim4->Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && startCaptureLeft) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x204>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d175      	bne.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d171      	bne.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d06d      	beq.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>
		if (!isFirstCapturedLeft) {
 800130c:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x228>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10a      	bne.n	800132a <HAL_TIM_IC_CaptureCallback+0x13e>
			capturesLeft[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001314:	210c      	movs	r1, #12
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f003 ff7a 	bl	8005210 <HAL_TIM_ReadCapturedValue>
 800131c:	4603      	mov	r3, r0
 800131e:	4a3e      	ldr	r2, [pc, #248]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001320:	6013      	str	r3, [r2, #0]
			isFirstCapturedLeft = true;
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			isFirstCapturedLeft = false;
			captureDoneLeft = true;

		}
	}
}
 8001328:	e05e      	b.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x1fc>
			capturesLeft[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800132a:	210c      	movs	r1, #12
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f003 ff6f 	bl	8005210 <HAL_TIM_ReadCapturedValue>
 8001332:	4603      	mov	r3, r0
 8001334:	4a38      	ldr	r2, [pc, #224]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001336:	6053      	str	r3, [r2, #4]
			if (capturesLeft[1] >= capturesLeft[0]) {
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d307      	bcc.n	8001354 <HAL_TIM_IC_CaptureCallback+0x168>
				diffCaptureLeft = capturesLeft[1] - capturesLeft[0];
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <HAL_TIM_IC_CaptureCallback+0x230>)
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_TIM_IC_CaptureCallback+0x180>
				diffCaptureLeft = (htim->Instance->ARR - capturesLeft[0]) + capturesLeft[1] + 1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4413      	add	r3, r2
 8001366:	3301      	adds	r3, #1
 8001368:	4a2c      	ldr	r2, [pc, #176]	; (800141c <HAL_TIM_IC_CaptureCallback+0x230>)
 800136a:	6013      	str	r3, [r2, #0]
			frequencyLeft = HAL_RCC_GetPCLK1Freq() / (tim4->Instance->PSC + 1.0);
 800136c:	f003 f8de 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8001370:	4603      	mov	r3, r0
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f870 	bl	8000458 <__aeabi_ui2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x204>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f867 	bl	8000458 <__aeabi_ui2d>
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001390:	f7fe ff26 	bl	80001e0 <__adddf3>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff fa00 	bl	80007a0 <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fae2 	bl	8000970 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_TIM_IC_CaptureCallback+0x234>)
 80013b0:	6013      	str	r3, [r2, #0]
			frequencyLeft = (float) frequencyLeft / (float) diffCaptureLeft;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_TIM_IC_CaptureCallback+0x234>)
 80013b4:	edd3 6a00 	vldr	s13, [r3]
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_TIM_IC_CaptureCallback+0x230>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_TIM_IC_CaptureCallback+0x234>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
			startCaptureLeft = false;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x224>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
			isFirstCapturedLeft = false;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x228>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
			captureDoneLeft = true;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_TIM_IC_CaptureCallback+0x238>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdb0      	pop	{r4, r5, r7, pc}
 80013f0:	200000a8 	.word	0x200000a8
 80013f4:	2000002c 	.word	0x2000002c
 80013f8:	20000030 	.word	0x20000030
 80013fc:	20000038 	.word	0x20000038
 8001400:	20000040 	.word	0x20000040
 8001404:	3ff00000 	.word	0x3ff00000
 8001408:	20000044 	.word	0x20000044
 800140c:	20000034 	.word	0x20000034
 8001410:	20000048 	.word	0x20000048
 8001414:	2000004c 	.word	0x2000004c
 8001418:	20000054 	.word	0x20000054
 800141c:	2000005c 	.word	0x2000005c
 8001420:	20000060 	.word	0x20000060
 8001424:	20000050 	.word	0x20000050

08001428 <initColourSensors>:
//		}
//	}
//}

// Initialize and calibrate colour sensors
void initColourSensors(TIM_HandleTypeDef* htim4) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	tim4 = htim4;
 8001430:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <initColourSensors+0x98>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(tim4, TIM_CHANNEL_2);
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <initColourSensors+0x98>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2104      	movs	r1, #4
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fa9f 	bl	8004980 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(tim4, TIM_CHANNEL_4);
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <initColourSensors+0x98>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	210c      	movs	r1, #12
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fa99 	bl	8004980 <HAL_TIM_IC_Start_IT>

	HAL_Delay(2000);
 800144e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001452:	f001 fcdf 	bl	8002e14 <HAL_Delay>
//	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
//		HAL_Delay(50);
//	}
	getRightColourIntensities(&freqWBRight);
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <initColourSensors+0x9c>)
 8001458:	f000 f886 	bl	8001568 <getRightColourIntensities>
	getLeftColourIntensities(&freqWBLeft);
 800145c:	481a      	ldr	r0, [pc, #104]	; (80014c8 <initColourSensors+0xa0>)
 800145e:	f000 f8b3 	bl	80015c8 <getLeftColourIntensities>
	whiteBalance = true;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <initColourSensors+0xa4>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001468:	2120      	movs	r1, #32
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <initColourSensors+0xa8>)
 800146c:	f002 fa8f 	bl	800398e <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001470:	20fa      	movs	r0, #250	; 0xfa
 8001472:	f001 fccf 	bl	8002e14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001476:	2120      	movs	r1, #32
 8001478:	4815      	ldr	r0, [pc, #84]	; (80014d0 <initColourSensors+0xa8>)
 800147a:	f002 fa88 	bl	800398e <HAL_GPIO_TogglePin>
	HAL_Delay(4750);
 800147e:	f241 208e 	movw	r0, #4750	; 0x128e
 8001482:	f001 fcc7 	bl	8002e14 <HAL_Delay>

//	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
//		HAL_Delay(50);
//	}
	getRightColourIntensities(&freqDCRight);
 8001486:	4813      	ldr	r0, [pc, #76]	; (80014d4 <initColourSensors+0xac>)
 8001488:	f000 f86e 	bl	8001568 <getRightColourIntensities>
	getLeftColourIntensities(&freqDCLeft);
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <initColourSensors+0xb0>)
 800148e:	f000 f89b 	bl	80015c8 <getLeftColourIntensities>
	darkColour = true;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <initColourSensors+0xb4>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001498:	2120      	movs	r1, #32
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <initColourSensors+0xa8>)
 800149c:	f002 fa77 	bl	800398e <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80014a0:	20fa      	movs	r0, #250	; 0xfa
 80014a2:	f001 fcb7 	bl	8002e14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014a6:	2120      	movs	r1, #32
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <initColourSensors+0xa8>)
 80014aa:	f002 fa70 	bl	800398e <HAL_GPIO_TogglePin>
	HAL_Delay(4750);
 80014ae:	f241 208e 	movw	r0, #4750	; 0x128e
 80014b2:	f001 fcaf 	bl	8002e14 <HAL_Delay>
//		HAL_Delay(50);
//	}

	//HAL_Delay(500);

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000a8 	.word	0x200000a8
 80014c4:	20000088 	.word	0x20000088
 80014c8:	20000068 	.word	0x20000068
 80014cc:	20000064 	.word	0x20000064
 80014d0:	40020000 	.word	0x40020000
 80014d4:	20000098 	.word	0x20000098
 80014d8:	20000078 	.word	0x20000078
 80014dc:	20000065 	.word	0x20000065

080014e0 <getRightColourFrequency>:

float getRightColourFrequency() {
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	captureDoneRight = false;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <getRightColourFrequency+0x34>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
	startCaptureRight = true;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <getRightColourFrequency+0x38>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
	isFirstCapturedRight = false;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <getRightColourFrequency+0x3c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
	while (!captureDoneRight) {}
 80014f6:	bf00      	nop
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <getRightColourFrequency+0x34>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0fb      	beq.n	80014f8 <getRightColourFrequency+0x18>
	return frequencyRight;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <getRightColourFrequency+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	ee07 3a90 	vmov	s15, r3
}
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000034 	.word	0x20000034
 8001518:	2000002c 	.word	0x2000002c
 800151c:	20000030 	.word	0x20000030
 8001520:	20000044 	.word	0x20000044

08001524 <getLeftColourFrequency>:

float getLeftColourFrequency() {
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	captureDoneLeft = false;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <getLeftColourFrequency+0x34>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	startCaptureLeft = true;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <getLeftColourFrequency+0x38>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
	isFirstCapturedLeft = false;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <getLeftColourFrequency+0x3c>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
	while (!captureDoneLeft) {}
 800153a:	bf00      	nop
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <getLeftColourFrequency+0x34>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0fb      	beq.n	800153c <getLeftColourFrequency+0x18>
	return frequencyLeft;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <getLeftColourFrequency+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	ee07 3a90 	vmov	s15, r3
}
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	20000050 	.word	0x20000050
 800155c:	20000048 	.word	0x20000048
 8001560:	2000004c 	.word	0x2000004c
 8001564:	20000060 	.word	0x20000060

08001568 <getRightColourIntensities>:

void getRightColourIntensities(Frequency *freq) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	setRightColour(RED);
 8001570:	2000      	movs	r0, #0
 8001572:	f000 fa49 	bl	8001a08 <setRightColour>
	freq->red = getRightColourFrequency();
 8001576:	f7ff ffb3 	bl	80014e0 <getRightColourFrequency>
 800157a:	eef0 7a40 	vmov.f32	s15, s0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edc3 7a00 	vstr	s15, [r3]
	setRightColour(GREEN);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fa3f 	bl	8001a08 <setRightColour>
	freq->green = getRightColourFrequency();
 800158a:	f7ff ffa9 	bl	80014e0 <getRightColourFrequency>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	edc3 7a01 	vstr	s15, [r3, #4]
	setRightColour(BLUE);
 8001598:	2001      	movs	r0, #1
 800159a:	f000 fa35 	bl	8001a08 <setRightColour>
	freq->blue = getRightColourFrequency();
 800159e:	f7ff ff9f 	bl	80014e0 <getRightColourFrequency>
 80015a2:	eef0 7a40 	vmov.f32	s15, s0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	edc3 7a02 	vstr	s15, [r3, #8]
	setRightColour(CLEAR);
 80015ac:	2002      	movs	r0, #2
 80015ae:	f000 fa2b 	bl	8001a08 <setRightColour>
	freq->clear = getRightColourFrequency();
 80015b2:	f7ff ff95 	bl	80014e0 <getRightColourFrequency>
 80015b6:	eef0 7a40 	vmov.f32	s15, s0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <getLeftColourIntensities>:

void getLeftColourIntensities(Frequency *freq) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	setLeftColour(RED);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 fa5f 	bl	8001a94 <setLeftColour>
	freq->red = getLeftColourFrequency();
 80015d6:	f7ff ffa5 	bl	8001524 <getLeftColourFrequency>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edc3 7a00 	vstr	s15, [r3]
	setLeftColour(GREEN);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 fa55 	bl	8001a94 <setLeftColour>
	freq->green = getLeftColourFrequency();
 80015ea:	f7ff ff9b 	bl	8001524 <getLeftColourFrequency>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a01 	vstr	s15, [r3, #4]
	setLeftColour(BLUE);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f000 fa4b 	bl	8001a94 <setLeftColour>
	freq->blue = getLeftColourFrequency();
 80015fe:	f7ff ff91 	bl	8001524 <getLeftColourFrequency>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edc3 7a02 	vstr	s15, [r3, #8]
	setLeftColour(CLEAR);
 800160c:	2002      	movs	r0, #2
 800160e:	f000 fa41 	bl	8001a94 <setLeftColour>
	freq->clear = getLeftColourFrequency();
 8001612:	f7ff ff87 	bl	8001524 <getLeftColourFrequency>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <getRightRGB>:

void getRightRGB(RGB *rgb) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	Frequency freq;
	getRightColourIntensities(&freq);
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff97 	bl	8001568 <getRightColourIntensities>

	float ared = (freq.red - freqDCRight.red) / (freqWBRight.red - freqDCRight.red);
 800163a:	ed97 7a02 	vldr	s14, [r7, #8]
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <getRightRGB+0x140>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <getRightRGB+0x144>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <getRightRGB+0x140>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165c:	edc7 7a08 	vstr	s15, [r7, #32]
	float agreen = (freq.green - freqDCRight.green) / (freqWBRight.green - freqDCRight.green);
 8001660:	ed97 7a03 	vldr	s14, [r7, #12]
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <getRightRGB+0x140>)
 8001666:	edd3 7a01 	vldr	s15, [r3, #4]
 800166a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <getRightRGB+0x144>)
 8001670:	ed93 7a01 	vldr	s14, [r3, #4]
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <getRightRGB+0x140>)
 8001676:	edd3 7a01 	vldr	s15, [r3, #4]
 800167a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001682:	edc7 7a07 	vstr	s15, [r7, #28]
	float ablue = (freq.blue - freqDCRight.blue) / (freqWBRight.blue - freqDCRight.blue);
 8001686:	ed97 7a04 	vldr	s14, [r7, #16]
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <getRightRGB+0x140>)
 800168c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001690:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <getRightRGB+0x144>)
 8001696:	ed93 7a02 	vldr	s14, [r3, #8]
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <getRightRGB+0x140>)
 800169c:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a8:	edc7 7a06 	vstr	s15, [r7, #24]

	float amax = ared;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
	if (agreen > amax) {
 80016b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80016b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	dd01      	ble.n	80016c6 <getRightRGB+0x9e>
		amax = agreen;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (ablue > amax) {
 80016c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80016ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	dd01      	ble.n	80016dc <getRightRGB+0xb4>
		amax = ablue;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (amax < 1.0) {
 80016dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ec:	d502      	bpl.n	80016f4 <getRightRGB+0xcc>
		amax = 1.0;
 80016ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	rgb->red = (uint8_t) (255 * ared / amax);
 80016f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80016f8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001770 <getRightRGB+0x148>
 80016fc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001700:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170c:	edc7 7a00 	vstr	s15, [r7]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	701a      	strb	r2, [r3, #0]
	rgb->green = (uint8_t) (255 * agreen / amax);
 8001718:	edd7 7a07 	vldr	s15, [r7, #28]
 800171c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001770 <getRightRGB+0x148>
 8001720:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001724:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001730:	edc7 7a00 	vstr	s15, [r7]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	705a      	strb	r2, [r3, #1]
	rgb->blue = (uint8_t) (255 * ablue / amax);
 800173c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001740:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001770 <getRightRGB+0x148>
 8001744:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001748:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001754:	edc7 7a00 	vstr	s15, [r7]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	709a      	strb	r2, [r3, #2]
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000098 	.word	0x20000098
 800176c:	20000088 	.word	0x20000088
 8001770:	437f0000 	.word	0x437f0000

08001774 <getLeftRGB>:

void getLeftRGB(RGB *rgb) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	Frequency freq;
	getLeftColourIntensities(&freq);
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff21 	bl	80015c8 <getLeftColourIntensities>

	float ared = (freq.red - freqDCLeft.red) / (freqWBLeft.red - freqDCLeft.red);
 8001786:	ed97 7a02 	vldr	s14, [r7, #8]
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <getLeftRGB+0x140>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001794:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <getLeftRGB+0x144>)
 8001796:	ed93 7a00 	vldr	s14, [r3]
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <getLeftRGB+0x140>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a8:	edc7 7a08 	vstr	s15, [r7, #32]
	float agreen = (freq.green - freqDCLeft.green) / (freqWBLeft.green - freqDCLeft.green);
 80017ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <getLeftRGB+0x140>)
 80017b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80017b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <getLeftRGB+0x144>)
 80017bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <getLeftRGB+0x140>)
 80017c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ce:	edc7 7a07 	vstr	s15, [r7, #28]
	float ablue = (freq.blue - freqDCLeft.blue) / (freqWBLeft.blue - freqDCLeft.blue);
 80017d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <getLeftRGB+0x140>)
 80017d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <getLeftRGB+0x144>)
 80017e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80017e6:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <getLeftRGB+0x140>)
 80017e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f4:	edc7 7a06 	vstr	s15, [r7, #24]

	float amax = ared;
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (agreen > amax) {
 80017fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001800:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	dd01      	ble.n	8001812 <getLeftRGB+0x9e>
		amax = agreen;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (ablue > amax) {
 8001812:	ed97 7a06 	vldr	s14, [r7, #24]
 8001816:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800181a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	dd01      	ble.n	8001828 <getLeftRGB+0xb4>
		amax = ablue;
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (amax < 1.0) {
 8001828:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800182c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d502      	bpl.n	8001840 <getLeftRGB+0xcc>
		amax = 1.0;
 800183a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	rgb->red = (uint8_t) (255 * ared / amax);
 8001840:	edd7 7a08 	vldr	s15, [r7, #32]
 8001844:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80018bc <getLeftRGB+0x148>
 8001848:	ee67 6a87 	vmul.f32	s13, s15, s14
 800184c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001858:	edc7 7a00 	vstr	s15, [r7]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
	rgb->green = (uint8_t) (255 * agreen / amax);
 8001864:	edd7 7a07 	vldr	s15, [r7, #28]
 8001868:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80018bc <getLeftRGB+0x148>
 800186c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001870:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187c:	edc7 7a00 	vstr	s15, [r7]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	705a      	strb	r2, [r3, #1]
	rgb->blue = (uint8_t) (255 * ablue / amax);
 8001888:	edd7 7a06 	vldr	s15, [r7, #24]
 800188c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80018bc <getLeftRGB+0x148>
 8001890:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001894:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a0:	edc7 7a00 	vstr	s15, [r7]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	709a      	strb	r2, [r3, #2]
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000078 	.word	0x20000078
 80018b8:	20000068 	.word	0x20000068
 80018bc:	437f0000 	.word	0x437f0000

080018c0 <getRightColour>:

Colour getRightColour() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
	RGB rgb;
	getRightRGB(&rgb);
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fead 	bl	8001628 <getRightRGB>
	// rgb.red >= 200 && rgb.green >= 200 && rgb.blue >= 200
	if ((rgb.red >= 200 && rgb.green >= 200 && rgb.blue >= 100) || (rgb.red >= 200 && rgb.blue >= 200 && rgb.green >= 100) || (rgb.green >= 200 && rgb.blue >= 200 && rgb.red >= 100)) {
 80018ce:	793b      	ldrb	r3, [r7, #4]
 80018d0:	2bc7      	cmp	r3, #199	; 0xc7
 80018d2:	d905      	bls.n	80018e0 <getRightColour+0x20>
 80018d4:	797b      	ldrb	r3, [r7, #5]
 80018d6:	2bc7      	cmp	r3, #199	; 0xc7
 80018d8:	d902      	bls.n	80018e0 <getRightColour+0x20>
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	2b63      	cmp	r3, #99	; 0x63
 80018de:	d811      	bhi.n	8001904 <getRightColour+0x44>
 80018e0:	793b      	ldrb	r3, [r7, #4]
 80018e2:	2bc7      	cmp	r3, #199	; 0xc7
 80018e4:	d905      	bls.n	80018f2 <getRightColour+0x32>
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	2bc7      	cmp	r3, #199	; 0xc7
 80018ea:	d902      	bls.n	80018f2 <getRightColour+0x32>
 80018ec:	797b      	ldrb	r3, [r7, #5]
 80018ee:	2b63      	cmp	r3, #99	; 0x63
 80018f0:	d808      	bhi.n	8001904 <getRightColour+0x44>
 80018f2:	797b      	ldrb	r3, [r7, #5]
 80018f4:	2bc7      	cmp	r3, #199	; 0xc7
 80018f6:	d907      	bls.n	8001908 <getRightColour+0x48>
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	2bc7      	cmp	r3, #199	; 0xc7
 80018fc:	d904      	bls.n	8001908 <getRightColour+0x48>
 80018fe:	793b      	ldrb	r3, [r7, #4]
 8001900:	2b63      	cmp	r3, #99	; 0x63
 8001902:	d901      	bls.n	8001908 <getRightColour+0x48>
		return NO_COLOUR;
 8001904:	2305      	movs	r3, #5
 8001906:	e029      	b.n	800195c <getRightColour+0x9c>
	} else if (rgb.red <= 20 && rgb.green <= 20 && rgb.blue <= 20) {
 8001908:	793b      	ldrb	r3, [r7, #4]
 800190a:	2b14      	cmp	r3, #20
 800190c:	d807      	bhi.n	800191e <getRightColour+0x5e>
 800190e:	797b      	ldrb	r3, [r7, #5]
 8001910:	2b14      	cmp	r3, #20
 8001912:	d804      	bhi.n	800191e <getRightColour+0x5e>
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	2b14      	cmp	r3, #20
 8001918:	d801      	bhi.n	800191e <getRightColour+0x5e>
		return BLACK;
 800191a:	2304      	movs	r3, #4
 800191c:	e01e      	b.n	800195c <getRightColour+0x9c>
	} else if (rgb.red >= rgb.green && rgb.red >= rgb.blue) {
 800191e:	793a      	ldrb	r2, [r7, #4]
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	429a      	cmp	r2, r3
 8001924:	d305      	bcc.n	8001932 <getRightColour+0x72>
 8001926:	793a      	ldrb	r2, [r7, #4]
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	429a      	cmp	r2, r3
 800192c:	d301      	bcc.n	8001932 <getRightColour+0x72>
		return RED;
 800192e:	2300      	movs	r3, #0
 8001930:	e014      	b.n	800195c <getRightColour+0x9c>
	} else if (rgb.green >= rgb.red && rgb.green >= rgb.blue) {
 8001932:	797a      	ldrb	r2, [r7, #5]
 8001934:	793b      	ldrb	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d305      	bcc.n	8001946 <getRightColour+0x86>
 800193a:	797a      	ldrb	r2, [r7, #5]
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	429a      	cmp	r2, r3
 8001940:	d301      	bcc.n	8001946 <getRightColour+0x86>
		return GREEN;
 8001942:	2303      	movs	r3, #3
 8001944:	e00a      	b.n	800195c <getRightColour+0x9c>
	} else if (rgb.blue >= rgb.red && rgb.blue >= rgb.green) {
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	793b      	ldrb	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d305      	bcc.n	800195a <getRightColour+0x9a>
 800194e:	79ba      	ldrb	r2, [r7, #6]
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	429a      	cmp	r2, r3
 8001954:	d301      	bcc.n	800195a <getRightColour+0x9a>
		return BLUE;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <getRightColour+0x9c>
	}
	return NO_COLOUR;
 800195a:	2305      	movs	r3, #5
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <getLeftColour>:


Colour getLeftColour() {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	RGB rgb;
	getLeftRGB(&rgb);
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff01 	bl	8001774 <getLeftRGB>
	// (rgb.red >= 200 && rgb.green >= 200) || (rgb.red >= 200 && rgb.blue >= 200) || (rgb.green >= 200 && rgb.blue >= 200)
	if ((rgb.red >= 200 && rgb.green >= 200 && rgb.blue >= 100) || (rgb.red >= 200 && rgb.blue >= 200 && rgb.green >= 100) || (rgb.green >= 200 && rgb.blue >= 200 && rgb.red >= 100)) {
 8001972:	793b      	ldrb	r3, [r7, #4]
 8001974:	2bc7      	cmp	r3, #199	; 0xc7
 8001976:	d905      	bls.n	8001984 <getLeftColour+0x20>
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	2bc7      	cmp	r3, #199	; 0xc7
 800197c:	d902      	bls.n	8001984 <getLeftColour+0x20>
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b63      	cmp	r3, #99	; 0x63
 8001982:	d811      	bhi.n	80019a8 <getLeftColour+0x44>
 8001984:	793b      	ldrb	r3, [r7, #4]
 8001986:	2bc7      	cmp	r3, #199	; 0xc7
 8001988:	d905      	bls.n	8001996 <getLeftColour+0x32>
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	2bc7      	cmp	r3, #199	; 0xc7
 800198e:	d902      	bls.n	8001996 <getLeftColour+0x32>
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	2b63      	cmp	r3, #99	; 0x63
 8001994:	d808      	bhi.n	80019a8 <getLeftColour+0x44>
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	2bc7      	cmp	r3, #199	; 0xc7
 800199a:	d907      	bls.n	80019ac <getLeftColour+0x48>
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2bc7      	cmp	r3, #199	; 0xc7
 80019a0:	d904      	bls.n	80019ac <getLeftColour+0x48>
 80019a2:	793b      	ldrb	r3, [r7, #4]
 80019a4:	2b63      	cmp	r3, #99	; 0x63
 80019a6:	d901      	bls.n	80019ac <getLeftColour+0x48>
		return NO_COLOUR;
 80019a8:	2305      	movs	r3, #5
 80019aa:	e029      	b.n	8001a00 <getLeftColour+0x9c>
	} else if (rgb.red <= 20 && rgb.green <= 20 && rgb.blue <= 20) {
 80019ac:	793b      	ldrb	r3, [r7, #4]
 80019ae:	2b14      	cmp	r3, #20
 80019b0:	d807      	bhi.n	80019c2 <getLeftColour+0x5e>
 80019b2:	797b      	ldrb	r3, [r7, #5]
 80019b4:	2b14      	cmp	r3, #20
 80019b6:	d804      	bhi.n	80019c2 <getLeftColour+0x5e>
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	2b14      	cmp	r3, #20
 80019bc:	d801      	bhi.n	80019c2 <getLeftColour+0x5e>
		return BLACK;
 80019be:	2304      	movs	r3, #4
 80019c0:	e01e      	b.n	8001a00 <getLeftColour+0x9c>
	} else if (rgb.red >= rgb.green && rgb.red >= rgb.blue) {
 80019c2:	793a      	ldrb	r2, [r7, #4]
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d305      	bcc.n	80019d6 <getLeftColour+0x72>
 80019ca:	793a      	ldrb	r2, [r7, #4]
 80019cc:	79bb      	ldrb	r3, [r7, #6]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d301      	bcc.n	80019d6 <getLeftColour+0x72>
		return RED;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e014      	b.n	8001a00 <getLeftColour+0x9c>
	} else if (rgb.green >= rgb.red && rgb.green >= rgb.blue) {
 80019d6:	797a      	ldrb	r2, [r7, #5]
 80019d8:	793b      	ldrb	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d305      	bcc.n	80019ea <getLeftColour+0x86>
 80019de:	797a      	ldrb	r2, [r7, #5]
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d301      	bcc.n	80019ea <getLeftColour+0x86>
		return GREEN;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e00a      	b.n	8001a00 <getLeftColour+0x9c>
	} else if (rgb.blue >= rgb.red && rgb.blue >= rgb.green) {
 80019ea:	79ba      	ldrb	r2, [r7, #6]
 80019ec:	793b      	ldrb	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d305      	bcc.n	80019fe <getLeftColour+0x9a>
 80019f2:	79ba      	ldrb	r2, [r7, #6]
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d301      	bcc.n	80019fe <getLeftColour+0x9a>
		return BLUE;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <getLeftColour+0x9c>
	}
	return NO_COLOUR;
 80019fe:	2305      	movs	r3, #5
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <setRightColour>:

void setRightColour(Colour colour) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	if (colour == RED) {
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <setRightColour+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	481c      	ldr	r0, [pc, #112]	; (8001a90 <setRightColour+0x88>)
 8001a1e:	f001 ff9d 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2102      	movs	r1, #2
 8001a26:	481a      	ldr	r0, [pc, #104]	; (8001a90 <setRightColour+0x88>)
 8001a28:	f001 ff98 	bl	800395c <HAL_GPIO_WritePin>
 8001a2c:	e028      	b.n	8001a80 <setRightColour+0x78>
	} else if (colour == BLUE) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10a      	bne.n	8001a4a <setRightColour+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	4815      	ldr	r0, [pc, #84]	; (8001a90 <setRightColour+0x88>)
 8001a3a:	f001 ff8f 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2102      	movs	r1, #2
 8001a42:	4813      	ldr	r0, [pc, #76]	; (8001a90 <setRightColour+0x88>)
 8001a44:	f001 ff8a 	bl	800395c <HAL_GPIO_WritePin>
 8001a48:	e01a      	b.n	8001a80 <setRightColour+0x78>
	} else if (colour == CLEAR) {
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d10a      	bne.n	8001a66 <setRightColour+0x5e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2101      	movs	r1, #1
 8001a54:	480e      	ldr	r0, [pc, #56]	; (8001a90 <setRightColour+0x88>)
 8001a56:	f001 ff81 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <setRightColour+0x88>)
 8001a60:	f001 ff7c 	bl	800395c <HAL_GPIO_WritePin>
 8001a64:	e00c      	b.n	8001a80 <setRightColour+0x78>
	} else if (colour == GREEN) {
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d109      	bne.n	8001a80 <setRightColour+0x78>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <setRightColour+0x88>)
 8001a72:	f001 ff73 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <setRightColour+0x88>)
 8001a7c:	f001 ff6e 	bl	800395c <HAL_GPIO_WritePin>
	}
	HAL_Delay(3);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f001 f9c7 	bl	8002e14 <HAL_Delay>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40020800 	.word	0x40020800

08001a94 <setLeftColour>:

void setLeftColour(Colour colour) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	if (colour == RED) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <setLeftColour+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	481c      	ldr	r0, [pc, #112]	; (8001b1c <setLeftColour+0x88>)
 8001aaa:	f001 ff57 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <setLeftColour+0x8c>)
 8001ab4:	f001 ff52 	bl	800395c <HAL_GPIO_WritePin>
 8001ab8:	e028      	b.n	8001b0c <setLeftColour+0x78>
	} else if (colour == BLUE) {
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10a      	bne.n	8001ad6 <setLeftColour+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4815      	ldr	r0, [pc, #84]	; (8001b1c <setLeftColour+0x88>)
 8001ac6:	f001 ff49 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2101      	movs	r1, #1
 8001ace:	4814      	ldr	r0, [pc, #80]	; (8001b20 <setLeftColour+0x8c>)
 8001ad0:	f001 ff44 	bl	800395c <HAL_GPIO_WritePin>
 8001ad4:	e01a      	b.n	8001b0c <setLeftColour+0x78>
	} else if (colour == CLEAR) {
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d10a      	bne.n	8001af2 <setLeftColour+0x5e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2108      	movs	r1, #8
 8001ae0:	480e      	ldr	r0, [pc, #56]	; (8001b1c <setLeftColour+0x88>)
 8001ae2:	f001 ff3b 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2101      	movs	r1, #1
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <setLeftColour+0x8c>)
 8001aec:	f001 ff36 	bl	800395c <HAL_GPIO_WritePin>
 8001af0:	e00c      	b.n	8001b0c <setLeftColour+0x78>
	} else if (colour == GREEN) {
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d109      	bne.n	8001b0c <setLeftColour+0x78>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2108      	movs	r1, #8
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <setLeftColour+0x88>)
 8001afe:	f001 ff2d 	bl	800395c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2101      	movs	r1, #1
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <setLeftColour+0x8c>)
 8001b08:	f001 ff28 	bl	800395c <HAL_GPIO_WritePin>
	}
	HAL_Delay(3);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f001 f981 	bl	8002e14 <HAL_Delay>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020400 	.word	0x40020400

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f001 f902 	bl	8002d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f824 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f000 faf6 	bl	8002120 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b34:	f000 fa80 	bl	8002038 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001b38:	f000 f93a 	bl	8001db0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001b3c:	f000 f8b4 	bl	8001ca8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b40:	f000 f9ac 	bl	8001e9c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b44:	f000 fa1a 	bl	8001f7c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001b48:	f000 faa0 	bl	800208c <MX_USART6_UART_Init>
  MX_DMA_Init();
 8001b4c:	f000 fac8 	bl	80020e0 <MX_DMA_Init>
  MX_I2C2_Init();
 8001b50:	f000 f87c 	bl	8001c4c <MX_I2C2_Init>

//  initMotors(&htim1, &htim3);
//  initServo(&htim2);
//  initColourSensors(&htim4);
//  HAL_Delay(3000);
  init(&htim1, &htim3, &htim2, &htim4);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <main+0x44>)
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <main+0x48>)
 8001b58:	4905      	ldr	r1, [pc, #20]	; (8001b70 <main+0x4c>)
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <main+0x50>)
 8001b5c:	f7ff f8d4 	bl	8000d08 <init>
  searchAndRescue();
 8001b60:	f7ff fb24 	bl	80011ac <searchAndRescue>

  while (1)
 8001b64:	e7fe      	b.n	8001b64 <main+0x40>
 8001b66:	bf00      	nop
 8001b68:	2000010c 	.word	0x2000010c
 8001b6c:	2000027c 	.word	0x2000027c
 8001b70:	200001a8 	.word	0x200001a8
 8001b74:	200001f0 	.word	0x200001f0

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	; 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2230      	movs	r2, #48	; 0x30
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 faa6 	bl	80060d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <SystemClock_Config+0xcc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <SystemClock_Config+0xcc>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <SystemClock_Config+0xd0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <SystemClock_Config+0xd0>)
 8001bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <SystemClock_Config+0xd0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be0:	2310      	movs	r3, #16
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bec:	2308      	movs	r3, #8
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001bf0:	2354      	movs	r3, #84	; 0x54
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 f847 	bl	8003c94 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c0c:	f000 fb2a 	bl	8002264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 faa9 	bl	8004184 <HAL_RCC_ClockConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c38:	f000 fb14 	bl	8002264 <Error_Handler>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3750      	adds	r7, #80	; 0x50
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <MX_I2C2_Init+0x54>)
 8001c54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_I2C2_Init+0x58>)
 8001c5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c8a:	f001 febf 	bl	8003a0c <HAL_I2C_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c94:	f000 fae6 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000154 	.word	0x20000154
 8001ca0:	40005800 	.word	0x40005800
 8001ca4:	000186a0 	.word	0x000186a0

08001ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b092      	sub	sp, #72	; 0x48
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
 8001cc8:	615a      	str	r2, [r3, #20]
 8001cca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2220      	movs	r2, #32
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fa00 	bl	80060d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <MX_TIM1_Init+0x104>)
 8001cdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1680;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001cee:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d06:	4828      	ldr	r0, [pc, #160]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001d08:	f002 fc87 	bl	800461a <HAL_TIM_PWM_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 faa7 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d22:	4619      	mov	r1, r3
 8001d24:	4820      	ldr	r0, [pc, #128]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001d26:	f003 fec9 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001d30:	f000 fa98 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d34:	2360      	movs	r3, #96	; 0x60
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2204      	movs	r2, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4813      	ldr	r0, [pc, #76]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001d5a:	f003 f8cf 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001d64:	f000 fa7e 	bl	8002264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001d8c:	f003 ff04 	bl	8005b98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001d96:	f000 fa65 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM1_Init+0x100>)
 8001d9c:	f000 fdf0 	bl	8002980 <HAL_TIM_MspPostInit>

}
 8001da0:	bf00      	nop
 8001da2:	3748      	adds	r7, #72	; 0x48
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200001f0 	.word	0x200001f0
 8001dac:	40010000 	.word	0x40010000

08001db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	; 0x38
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	615a      	str	r2, [r3, #20]
 8001dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001dea:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e0a:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e0c:	f002 fbb6 	bl	800457c <HAL_TIM_Base_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e16:	f000 fa25 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e24:	4619      	mov	r1, r3
 8001e26:	481c      	ldr	r0, [pc, #112]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e28:	f003 f92a 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e32:	f000 fa17 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e38:	f002 fbef 	bl	800461a <HAL_TIM_PWM_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e42:	f000 fa0f 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	4619      	mov	r1, r3
 8001e54:	4810      	ldr	r0, [pc, #64]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e56:	f003 fe31 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e60:	f000 fa00 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e64:	2360      	movs	r3, #96	; 0x60
 8001e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e7c:	f003 f83e 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e86:	f000 f9ed 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e8c:	f000 fd78 	bl	8002980 <HAL_TIM_MspPostInit>

}
 8001e90:	bf00      	nop
 8001e92:	3738      	adds	r7, #56	; 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000027c 	.word	0x2000027c

08001e9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001ec0:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <MX_TIM3_Init+0xdc>)
 8001ec2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1680;
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001ed4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ee6:	4823      	ldr	r0, [pc, #140]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001ee8:	f002 fb97 	bl	800461a <HAL_TIM_PWM_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001ef2:	f000 f9b7 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4619      	mov	r1, r3
 8001f04:	481b      	ldr	r0, [pc, #108]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001f06:	f003 fdd9 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001f10:	f000 f9a8 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f14:	2360      	movs	r3, #96	; 0x60
 8001f16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4812      	ldr	r0, [pc, #72]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001f2c:	f002 ffe6 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f36:	f000 f995 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001f42:	f002 ffdb 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f4c:	f000 f98a 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	220c      	movs	r2, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001f58:	f002 ffd0 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f62:	f000 f97f 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <MX_TIM3_Init+0xd8>)
 8001f68:	f000 fd0a 	bl	8002980 <HAL_TIM_MspPostInit>

}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200001a8 	.word	0x200001a8
 8001f78:	40000400 	.word	0x40000400

08001f7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001f9a:	4a26      	ldr	r2, [pc, #152]	; (8002034 <MX_TIM4_Init+0xb8>)
 8001f9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001fbe:	481c      	ldr	r0, [pc, #112]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fc0:	f002 fc8e 	bl	80048e0 <HAL_TIM_IC_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001fca:	f000 f94b 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4814      	ldr	r0, [pc, #80]	; (8002030 <MX_TIM4_Init+0xb4>)
 8001fde:	f003 fd6d 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001fe8:	f000 f93c 	bl	8002264 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fec:	2300      	movs	r3, #0
 8001fee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2204      	movs	r2, #4
 8002000:	4619      	mov	r1, r3
 8002002:	480b      	ldr	r0, [pc, #44]	; (8002030 <MX_TIM4_Init+0xb4>)
 8002004:	f002 fede 	bl	8004dc4 <HAL_TIM_IC_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800200e:	f000 f929 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002012:	463b      	mov	r3, r7
 8002014:	220c      	movs	r2, #12
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_TIM4_Init+0xb4>)
 800201a:	f002 fed3 	bl	8004dc4 <HAL_TIM_IC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002024:	f000 f91e 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	2000010c 	.word	0x2000010c
 8002034:	40000800 	.word	0x40000800

08002038 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <MX_USART2_UART_Init+0x50>)
 8002040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002070:	f003 fdf8 	bl	8005c64 <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207a:	f000 f8f3 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200002c4 	.word	0x200002c4
 8002088:	40004400 	.word	0x40004400

0800208c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <MX_USART6_UART_Init+0x50>)
 8002094:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 8002098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800209c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020b2:	220c      	movs	r2, #12
 80020b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART6_UART_Init+0x4c>)
 80020c4:	f003 fdce 	bl	8005c64 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020ce:	f000 f8c9 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000238 	.word	0x20000238
 80020dc:	40011400 	.word	0x40011400

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_DMA_Init+0x3c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <MX_DMA_Init+0x3c>)
 80020f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_DMA_Init+0x3c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	200e      	movs	r0, #14
 8002108:	f000 ff83 	bl	8003012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800210c:	200e      	movs	r0, #14
 800210e:	f000 ff9c 	bl	800304a <HAL_NVIC_EnableIRQ>

}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <MX_GPIO_Init+0x134>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a45      	ldr	r2, [pc, #276]	; (8002254 <MX_GPIO_Init+0x134>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <MX_GPIO_Init+0x134>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <MX_GPIO_Init+0x134>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <MX_GPIO_Init+0x134>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <MX_GPIO_Init+0x134>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <MX_GPIO_Init+0x134>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a37      	ldr	r2, [pc, #220]	; (8002254 <MX_GPIO_Init+0x134>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b35      	ldr	r3, [pc, #212]	; (8002254 <MX_GPIO_Init+0x134>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <MX_GPIO_Init+0x134>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a30      	ldr	r2, [pc, #192]	; (8002254 <MX_GPIO_Init+0x134>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <MX_GPIO_Init+0x134>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	211b      	movs	r1, #27
 80021aa:	482b      	ldr	r0, [pc, #172]	; (8002258 <MX_GPIO_Init+0x138>)
 80021ac:	f001 fbd6 	bl	800395c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80021b6:	4829      	ldr	r0, [pc, #164]	; (800225c <MX_GPIO_Init+0x13c>)
 80021b8:	f001 fbd0 	bl	800395c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 80021bc:	2200      	movs	r2, #0
 80021be:	f24e 0133 	movw	r1, #57395	; 0xe033
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <MX_GPIO_Init+0x140>)
 80021c4:	f001 fbca 	bl	800395c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	481e      	ldr	r0, [pc, #120]	; (8002258 <MX_GPIO_Init+0x138>)
 80021e0:	f001 fa38 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80021e4:	231b      	movs	r3, #27
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4817      	ldr	r0, [pc, #92]	; (8002258 <MX_GPIO_Init+0x138>)
 80021fc:	f001 fa2a 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002200:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4810      	ldr	r0, [pc, #64]	; (800225c <MX_GPIO_Init+0x13c>)
 800221a:	f001 fa1b 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB13 PB14
                           PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14
 800221e:	f24e 0333 	movw	r3, #57395	; 0xe033
 8002222:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	480a      	ldr	r0, [pc, #40]	; (8002260 <MX_GPIO_Init+0x140>)
 8002238:	f001 fa0c 	bl	8003654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	2028      	movs	r0, #40	; 0x28
 8002242:	f000 fee6 	bl	8003012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002246:	2028      	movs	r0, #40	; 0x28
 8002248:	f000 feff 	bl	800304a <HAL_NVIC_EnableIRQ>

}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	40020800 	.word	0x40020800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800226c:	e7fe      	b.n	800226c <Error_Handler+0x8>
	...

08002270 <initMotors>:
#include <main.h>

TIM_HandleTypeDef *tim1;
TIM_HandleTypeDef *tim3;

void initMotors(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	  HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 800227a:	2104      	movs	r1, #4
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f002 fa1b 	bl	80046b8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8002282:	2104      	movs	r1, #4
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f002 fa17 	bl	80046b8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 800228a:	210c      	movs	r1, #12
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f002 fa13 	bl	80046b8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8002292:	2100      	movs	r1, #0
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f002 fa0f 	bl	80046b8 <HAL_TIM_PWM_Start>
	  tim1 = htim1;
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <initMotors+0x70>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6013      	str	r3, [r2, #0]
	  tim3 = htim3;
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <initMotors+0x74>)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6013      	str	r3, [r2, #0]
	  htim1->Instance->CCR2 = 600;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
	  htim3->Instance->CCR2 = 600;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
	  htim3->Instance->CCR4 = 600;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
	  htim3->Instance->CCR1 = 600;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 80022ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d2:	f000 fd9f 	bl	8002e14 <HAL_Delay>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000030c 	.word	0x2000030c
 80022e4:	20000308 	.word	0x20000308

080022e8 <moveForwards>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

	HAL_Delay(500);
}

void moveForwards() {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2120      	movs	r1, #32
 80022f0:	4815      	ldr	r0, [pc, #84]	; (8002348 <moveForwards+0x60>)
 80022f2:	f001 fb33 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fc:	4812      	ldr	r0, [pc, #72]	; (8002348 <moveForwards+0x60>)
 80022fe:	f001 fb2d 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	2110      	movs	r1, #16
 8002306:	4810      	ldr	r0, [pc, #64]	; (8002348 <moveForwards+0x60>)
 8002308:	f001 fb28 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <moveForwards+0x60>)
 8002314:	f001 fb22 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	2110      	movs	r1, #16
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <moveForwards+0x64>)
 800231e:	f001 fb1d 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002328:	4807      	ldr	r0, [pc, #28]	; (8002348 <moveForwards+0x60>)
 800232a:	f001 fb17 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <moveForwards+0x68>)
 8002336:	f001 fb11 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	2102      	movs	r1, #2
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <moveForwards+0x60>)
 8002340:	f001 fb0c 	bl	800395c <HAL_GPIO_WritePin>

	//HAL_Delay(1000);
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020000 	.word	0x40020000

08002354 <moveBackwards>:

void moveBackwards() {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	2120      	movs	r1, #32
 800235c:	4815      	ldr	r0, [pc, #84]	; (80023b4 <moveBackwards+0x60>)
 800235e:	f001 fafd 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002368:	4812      	ldr	r0, [pc, #72]	; (80023b4 <moveBackwards+0x60>)
 800236a:	f001 faf7 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	4810      	ldr	r0, [pc, #64]	; (80023b4 <moveBackwards+0x60>)
 8002374:	f001 faf2 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800237e:	480d      	ldr	r0, [pc, #52]	; (80023b4 <moveBackwards+0x60>)
 8002380:	f001 faec 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	2110      	movs	r1, #16
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <moveBackwards+0x64>)
 800238a:	f001 fae7 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002394:	4807      	ldr	r0, [pc, #28]	; (80023b4 <moveBackwards+0x60>)
 8002396:	f001 fae1 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a0:	4806      	ldr	r0, [pc, #24]	; (80023bc <moveBackwards+0x68>)
 80023a2:	f001 fadb 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2102      	movs	r1, #2
 80023aa:	4802      	ldr	r0, [pc, #8]	; (80023b4 <moveBackwards+0x60>)
 80023ac:	f001 fad6 	bl	800395c <HAL_GPIO_WritePin>

	//HAL_Delay(1000);
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020000 	.word	0x40020000

080023c0 <turnRight>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
}



void turnRight() {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2120      	movs	r1, #32
 80023c8:	4815      	ldr	r0, [pc, #84]	; (8002420 <turnRight+0x60>)
 80023ca:	f001 fac7 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d4:	4812      	ldr	r0, [pc, #72]	; (8002420 <turnRight+0x60>)
 80023d6:	f001 fac1 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	2110      	movs	r1, #16
 80023de:	4810      	ldr	r0, [pc, #64]	; (8002420 <turnRight+0x60>)
 80023e0:	f001 fabc 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ea:	480d      	ldr	r0, [pc, #52]	; (8002420 <turnRight+0x60>)
 80023ec:	f001 fab6 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2110      	movs	r1, #16
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <turnRight+0x64>)
 80023f6:	f001 fab1 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <turnRight+0x60>)
 8002402:	f001 faab 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800240c:	4806      	ldr	r0, [pc, #24]	; (8002428 <turnRight+0x68>)
 800240e:	f001 faa5 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2102      	movs	r1, #2
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <turnRight+0x60>)
 8002418:	f001 faa0 	bl	800395c <HAL_GPIO_WritePin>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020000 	.word	0x40020000

0800242c <turnLeft>:

void turnLeft() {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	2120      	movs	r1, #32
 8002434:	4815      	ldr	r0, [pc, #84]	; (800248c <turnLeft+0x60>)
 8002436:	f001 fa91 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002440:	4812      	ldr	r0, [pc, #72]	; (800248c <turnLeft+0x60>)
 8002442:	f001 fa8b 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2110      	movs	r1, #16
 800244a:	4810      	ldr	r0, [pc, #64]	; (800248c <turnLeft+0x60>)
 800244c:	f001 fa86 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <turnLeft+0x60>)
 8002458:	f001 fa80 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	2110      	movs	r1, #16
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <turnLeft+0x64>)
 8002462:	f001 fa7b 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246c:	4807      	ldr	r0, [pc, #28]	; (800248c <turnLeft+0x60>)
 800246e:	f001 fa75 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002478:	4806      	ldr	r0, [pc, #24]	; (8002494 <turnLeft+0x68>)
 800247a:	f001 fa6f 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800247e:	2201      	movs	r2, #1
 8002480:	2102      	movs	r1, #2
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <turnLeft+0x60>)
 8002484:	f001 fa6a 	bl	800395c <HAL_GPIO_WritePin>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020000 	.word	0x40020000

08002498 <stopMotors>:

void stopMotors() {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	// Motor 1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2120      	movs	r1, #32
 80024a0:	4815      	ldr	r0, [pc, #84]	; (80024f8 <stopMotors+0x60>)
 80024a2:	f001 fa5b 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ac:	4812      	ldr	r0, [pc, #72]	; (80024f8 <stopMotors+0x60>)
 80024ae:	f001 fa55 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 2
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2110      	movs	r1, #16
 80024b6:	4810      	ldr	r0, [pc, #64]	; (80024f8 <stopMotors+0x60>)
 80024b8:	f001 fa50 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <stopMotors+0x60>)
 80024c4:	f001 fa4a 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 3
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2110      	movs	r1, #16
 80024cc:	480b      	ldr	r0, [pc, #44]	; (80024fc <stopMotors+0x64>)
 80024ce:	f001 fa45 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <stopMotors+0x60>)
 80024da:	f001 fa3f 	bl	800395c <HAL_GPIO_WritePin>

	// Motor 4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e4:	4806      	ldr	r0, [pc, #24]	; (8002500 <stopMotors+0x68>)
 80024e6:	f001 fa39 	bl	800395c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2102      	movs	r1, #2
 80024ee:	4802      	ldr	r0, [pc, #8]	; (80024f8 <stopMotors+0x60>)
 80024f0:	f001 fa34 	bl	800395c <HAL_GPIO_WritePin>
	//HAL_Delay(1000);
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020000 	.word	0x40020000

08002504 <slowLeftMotors>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
	//HAL_Delay(1000);
}

void slowLeftMotors() {
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
	// Motor 1 // 500
	tim1->Instance->CCR2 = 500;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <slowLeftMotors+0x28>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002512:	639a      	str	r2, [r3, #56]	; 0x38

	// Motor 2
	tim3->Instance->CCR2 = 500;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <slowLeftMotors+0x2c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_Delay(1000);
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000030c 	.word	0x2000030c
 8002530:	20000308 	.word	0x20000308

08002534 <slowRightMotors>:

void slowRightMotors() {
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	// Motor 3
	tim3->Instance->CCR4 = 500;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <slowRightMotors+0x28>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002542:	641a      	str	r2, [r3, #64]	; 0x40

	// Motor 4
	tim3->Instance->CCR1 = 500;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <slowRightMotors+0x28>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_Delay(1000);
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000308 	.word	0x20000308

08002560 <regularLeftMotors>:

void regularLeftMotors() {
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	// Motor 1
	tim1->Instance->CCR2 = 600;
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <regularLeftMotors+0x28>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800256e:	639a      	str	r2, [r3, #56]	; 0x38

	// Motor 2
	tim3->Instance->CCR2 = 600;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <regularLeftMotors+0x2c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 7216 	mov.w	r2, #600	; 0x258
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_Delay(1000);
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000030c 	.word	0x2000030c
 800258c:	20000308 	.word	0x20000308

08002590 <regularRightMotors>:

void regularRightMotors() {
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
	// Motor 3
	tim3->Instance->CCR4 = 600;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <regularRightMotors+0x28>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

	// Motor 4
	tim3->Instance->CCR1 = 600;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <regularRightMotors+0x28>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025aa:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_Delay(1000);
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000308 	.word	0x20000308

080025bc <speedLeftMotors>:

void speedLeftMotors() {
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
	// Motor 1
	tim1->Instance->CCR2 = 800;
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <speedLeftMotors+0x28>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38

	// Motor 2
	tim3->Instance->CCR2 = 800;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <speedLeftMotors+0x2c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_Delay(1000);
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	2000030c 	.word	0x2000030c
 80025e8:	20000308 	.word	0x20000308

080025ec <speedRightMotors>:

void speedRightMotors() {
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
	// Motor 3
	tim3->Instance->CCR4 = 800;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <speedRightMotors+0x28>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40

	// Motor 4
	tim3->Instance->CCR1 = 800;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <speedRightMotors+0x28>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002606:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_Delay(1000);
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000308 	.word	0x20000308

08002618 <initServo>:
#include <main.h>
#include <servo.h>

TIM_HandleTypeDef *tim2;

void initServo(TIM_HandleTypeDef *htim2) {
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	tim2 = htim2;
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <initServo+0x24>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
	//HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
	tim2->Instance->CCR1 = 125;
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <initServo+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	227d      	movs	r2, #125	; 0x7d
 800262e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	20000310 	.word	0x20000310

08002640 <openServo>:

	tim2->Instance->CCR1 = 150;
	HAL_Delay(2000);
}

void openServo() {
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	tim2->Instance->CCR1 = 75;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <openServo+0x1c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	224b      	movs	r2, #75	; 0x4b
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 800264e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002652:	f000 fbdf 	bl	8002e14 <HAL_Delay>
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000310 	.word	0x20000310

08002660 <closeServo>:

void closeServo() {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	tim2->Instance->CCR1 = 150;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <closeServo+0x1c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2296      	movs	r2, #150	; 0x96
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 800266e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002672:	f000 fbcf 	bl	8002e14 <HAL_Delay>
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000310 	.word	0x20000310

08002680 <startServo>:

void startServo() {
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(tim2, TIM_CHANNEL_1);
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <startServo+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f002 f814 	bl	80046b8 <HAL_TIM_PWM_Start>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000310 	.word	0x20000310

08002698 <stopServo>:

void stopServo() {
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(tim2, TIM_CHANNEL_1);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <stopServo+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 f8b8 	bl	8004818 <HAL_TIM_PWM_Stop>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000310 	.word	0x20000310

080026b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_MspInit+0x4c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_MspInit+0x4c>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_MspInit+0x4c>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026ee:	2007      	movs	r0, #7
 80026f0:	f000 fc84 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <HAL_I2C_MspInit+0xa4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d13c      	bne.n	800279c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_I2C_MspInit+0xa8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_I2C_MspInit+0xa8>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_I2C_MspInit+0xa8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002750:	2304      	movs	r3, #4
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4814      	ldr	r0, [pc, #80]	; (80027ac <HAL_I2C_MspInit+0xac>)
 800275c:	f000 ff7a 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002760:	2308      	movs	r3, #8
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002764:	2312      	movs	r3, #18
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002770:	2309      	movs	r3, #9
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	480c      	ldr	r0, [pc, #48]	; (80027ac <HAL_I2C_MspInit+0xac>)
 800277c:	f000 ff6a 	bl	8003654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_I2C_MspInit+0xa8>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_I2C_MspInit+0xa8>)
 800278a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_I2C_MspInit+0xa8>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40005800 	.word	0x40005800
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020400 	.word	0x40020400

080027b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_TIM_PWM_MspInit+0x70>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_TIM_PWM_MspInit+0x74>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a16      	ldr	r2, [pc, #88]	; (8002824 <HAL_TIM_PWM_MspInit+0x74>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_TIM_PWM_MspInit+0x74>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027de:	e01a      	b.n	8002816 <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_TIM_PWM_MspInit+0x78>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d115      	bne.n	8002816 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_TIM_PWM_MspInit+0x74>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_TIM_PWM_MspInit+0x74>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_TIM_PWM_MspInit+0x74>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	201d      	movs	r0, #29
 800280c:	f000 fc01 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002810:	201d      	movs	r0, #29
 8002812:	f000 fc1a 	bl	800304a <HAL_NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40023800 	.word	0x40023800
 8002828:	40000400 	.word	0x40000400

0800282c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d115      	bne.n	800286a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HAL_TIM_Base_MspInit+0x48>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_TIM_Base_MspInit+0x48>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_TIM_Base_MspInit+0x48>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	201c      	movs	r0, #28
 8002860:	f000 fbd7 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002864:	201c      	movs	r0, #28
 8002866:	f000 fbf0 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a35      	ldr	r2, [pc, #212]	; (800296c <HAL_TIM_IC_MspInit+0xf4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d164      	bne.n	8002964 <HAL_TIM_IC_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_TIM_IC_MspInit+0xf8>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a33      	ldr	r2, [pc, #204]	; (8002970 <HAL_TIM_IC_MspInit+0xf8>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_TIM_IC_MspInit+0xf8>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_TIM_IC_MspInit+0xf8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <HAL_TIM_IC_MspInit+0xf8>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_TIM_IC_MspInit+0xf8>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80028d2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028e4:	2302      	movs	r3, #2
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4821      	ldr	r0, [pc, #132]	; (8002974 <HAL_TIM_IC_MspInit+0xfc>)
 80028f0:	f000 feb0 	bl	8003654 <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_TIM_IC_MspInit+0x104>)
 80028f8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 80028fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002900:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002914:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800291c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002920:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002924:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8002938:	480f      	ldr	r0, [pc, #60]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 800293a:	f000 fba1 	bl	8003080 <HAL_DMA_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_TIM_IC_MspInit+0xd0>
    {
      Error_Handler();
 8002944:	f7ff fc8e 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_TIM_IC_MspInit+0x100>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	201e      	movs	r0, #30
 800295a:	f000 fb5a 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800295e:	201e      	movs	r0, #30
 8002960:	f000 fb73 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40000800 	.word	0x40000800
 8002970:	40023800 	.word	0x40023800
 8002974:	40020400 	.word	0x40020400
 8002978:	200000ac 	.word	0x200000ac
 800297c:	40026058 	.word	0x40026058

08002980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <HAL_TIM_MspPostInit+0x138>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d11f      	bne.n	80029e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a44      	ldr	r2, [pc, #272]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	4619      	mov	r1, r3
 80029da:	4839      	ldr	r0, [pc, #228]	; (8002ac0 <HAL_TIM_MspPostInit+0x140>)
 80029dc:	f000 fe3a 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029e0:	e066      	b.n	8002ab0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d11f      	bne.n	8002a2c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	4b32      	ldr	r3, [pc, #200]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a31      	ldr	r2, [pc, #196]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4826      	ldr	r0, [pc, #152]	; (8002ac0 <HAL_TIM_MspPostInit+0x140>)
 8002a26:	f000 fe15 	bl	8003654 <HAL_GPIO_Init>
}
 8002a2a:	e041      	b.n	8002ab0 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_TIM_MspPostInit+0x144>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d13c      	bne.n	8002ab0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_TIM_MspPostInit+0x13c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a6e:	2340      	movs	r3, #64	; 0x40
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <HAL_TIM_MspPostInit+0x140>)
 8002a8a:	f000 fde3 	bl	8003654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8002a8e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <HAL_TIM_MspPostInit+0x148>)
 8002aac:	f000 fdd2 	bl	8003654 <HAL_GPIO_Init>
}
 8002ab0:	bf00      	nop
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40020800 	.word	0x40020800

08002acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a41      	ldr	r2, [pc, #260]	; (8002bf0 <HAL_UART_MspInit+0x124>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12c      	bne.n	8002b48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a38      	ldr	r2, [pc, #224]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b26:	230c      	movs	r3, #12
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b36:	2307      	movs	r3, #7
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	482d      	ldr	r0, [pc, #180]	; (8002bf8 <HAL_UART_MspInit+0x12c>)
 8002b42:	f000 fd87 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b46:	e04f      	b.n	8002be8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <HAL_UART_MspInit+0x130>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d14a      	bne.n	8002be8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b5c:	f043 0320 	orr.w	r3, r3, #32
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_UART_MspInit+0x128>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480f      	ldr	r0, [pc, #60]	; (8002c00 <HAL_UART_MspInit+0x134>)
 8002bc2:	f000 fd47 	bl	8003654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	4619      	mov	r1, r3
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_UART_MspInit+0x12c>)
 8002be4:	f000 fd36 	bl	8003654 <HAL_GPIO_Init>
}
 8002be8:	bf00      	nop
 8002bea:	3730      	adds	r7, #48	; 0x30
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40004400 	.word	0x40004400
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40011400 	.word	0x40011400
 8002c00:	40020800 	.word	0x40020800

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <HardFault_Handler+0x4>

08002c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <MemManage_Handler+0x4>

08002c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <BusFault_Handler+0x4>

08002c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <UsageFault_Handler+0x4>

08002c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f000 f8c0 	bl	8002dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <DMA1_Stream3_IRQHandler+0x10>)
 8002c5e:	f000 fabd 	bl	80031dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200000ac 	.word	0x200000ac

08002c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM2_IRQHandler+0x10>)
 8002c72:	f001 ff9f 	bl	8004bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000027c 	.word	0x2000027c

08002c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM3_IRQHandler+0x10>)
 8002c86:	f001 ff95 	bl	8004bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200001a8 	.word	0x200001a8

08002c94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <TIM4_IRQHandler+0x10>)
 8002c9a:	f001 ff8b 	bl	8004bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000010c 	.word	0x2000010c

08002ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cb0:	f000 fe88 	bl	80039c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ce2:	490e      	ldr	r1, [pc, #56]	; (8002d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce8:	e002      	b.n	8002cf0 <LoopCopyDataInit>

08002cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cee:	3304      	adds	r3, #4

08002cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf4:	d3f9      	bcc.n	8002cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf6:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cf8:	4c0b      	ldr	r4, [pc, #44]	; (8002d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cfc:	e001      	b.n	8002d02 <LoopFillZerobss>

08002cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d00:	3204      	adds	r2, #4

08002d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d04:	d3fb      	bcc.n	8002cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d06:	f7ff ffd7 	bl	8002cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d0a:	f003 f9c1 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d0e:	f7fe ff09 	bl	8001b24 <main>
  bx  lr    
 8002d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002d20:	08006130 	.word	0x08006130
  ldr r2, =_sbss
 8002d24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002d28:	20000318 	.word	0x20000318

08002d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d2c:	e7fe      	b.n	8002d2c <ADC_IRQHandler>
	...

08002d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_Init+0x40>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <HAL_Init+0x40>)
 8002d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_Init+0x40>)
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_Init+0x40>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f000 f94f 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f000 f808 	bl	8002d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d64:	f7ff fca4 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00

08002d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_InitTick+0x54>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_InitTick+0x58>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4619      	mov	r1, r3
 8002d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f967 	bl	8003066 <HAL_SYSTICK_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00e      	b.n	8002dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b0f      	cmp	r3, #15
 8002da6:	d80a      	bhi.n	8002dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da8:	2200      	movs	r2, #0
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db0:	f000 f92f 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db4:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <HAL_InitTick+0x5c>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000004 	.word	0x20000004
 8002dcc:	2000000c 	.word	0x2000000c
 8002dd0:	20000008 	.word	0x20000008

08002dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_IncTick+0x20>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_IncTick+0x24>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_IncTick+0x24>)
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	20000314 	.word	0x20000314

08002dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_GetTick+0x14>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000314 	.word	0x20000314

08002e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff ffee 	bl	8002dfc <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2c:	d005      	beq.n	8002e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_Delay+0x44>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e3a:	bf00      	nop
 8002e3c:	f7ff ffde 	bl	8002dfc <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d8f7      	bhi.n	8002e3c <HAL_Delay+0x28>
  {
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8e:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	60d3      	str	r3, [r2, #12]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <__NVIC_GetPriorityGrouping+0x18>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	f003 0307 	and.w	r3, r3, #7
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db0b      	blt.n	8002eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4907      	ldr	r1, [pc, #28]	; (8002ef8 <__NVIC_EnableIRQ+0x38>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000e100 	.word	0xe000e100

08002efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db0a      	blt.n	8002f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	490c      	ldr	r1, [pc, #48]	; (8002f48 <__NVIC_SetPriority+0x4c>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f24:	e00a      	b.n	8002f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4908      	ldr	r1, [pc, #32]	; (8002f4c <__NVIC_SetPriority+0x50>)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3b04      	subs	r3, #4
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	761a      	strb	r2, [r3, #24]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000e100 	.word	0xe000e100
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf28      	it	cs
 8002f6e:	2304      	movcs	r3, #4
 8002f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d902      	bls.n	8002f80 <NVIC_EncodePriority+0x30>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3b03      	subs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <NVIC_EncodePriority+0x32>
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43d9      	mvns	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	4313      	orrs	r3, r2
         );
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fdc:	f7ff ff8e 	bl	8002efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff29 	bl	8002e5c <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003024:	f7ff ff3e 	bl	8002ea4 <__NVIC_GetPriorityGrouping>
 8003028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7ff ff8e 	bl	8002f50 <NVIC_EncodePriority>
 8003034:	4602      	mov	r2, r0
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff5d 	bl	8002efc <__NVIC_SetPriority>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff31 	bl	8002ec0 <__NVIC_EnableIRQ>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffa2 	bl	8002fb8 <SysTick_Config>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff feb6 	bl	8002dfc <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e099      	b.n	80031d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030bc:	e00f      	b.n	80030de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030be:	f7ff fe9d 	bl	8002dfc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d908      	bls.n	80030de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2203      	movs	r2, #3
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e078      	b.n	80031d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e8      	bne.n	80030be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <HAL_DMA_Init+0x158>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2b04      	cmp	r3, #4
 8003136:	d107      	bne.n	8003148 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	4313      	orrs	r3, r2
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0307 	bic.w	r3, r3, #7
 800315e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b04      	cmp	r3, #4
 8003170:	d117      	bne.n	80031a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f9e9 	bl	800355c <DMA_CheckFifoParam>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800319e:	2301      	movs	r3, #1
 80031a0:	e016      	b.n	80031d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f9a0 	bl	80034f0 <DMA_CalcBaseAndBitshift>
 80031b0:	4603      	mov	r3, r0
 80031b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	223f      	movs	r2, #63	; 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	f010803f 	.word	0xf010803f

080031dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031e8:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_DMA_IRQHandler+0x258>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a92      	ldr	r2, [pc, #584]	; (8003438 <HAL_DMA_IRQHandler+0x25c>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0a9b      	lsrs	r3, r3, #10
 80031f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	2208      	movs	r2, #8
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01a      	beq.n	8003248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0204 	bic.w	r2, r2, #4
 800322e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2208      	movs	r2, #8
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2201      	movs	r2, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2204      	movs	r2, #4
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d012      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	2204      	movs	r2, #4
 80032a2:	409a      	lsls	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2210      	movs	r2, #16
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d043      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d03c      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2210      	movs	r2, #16
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d018      	beq.n	800331e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d024      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
 800330a:	e01f      	b.n	800334c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
 800331c:	e016      	b.n	800334c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0208 	bic.w	r2, r2, #8
 800333a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2220      	movs	r2, #32
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 808e 	beq.w	800347a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8086 	beq.w	800347a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2220      	movs	r2, #32
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b05      	cmp	r3, #5
 8003384:	d136      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0216 	bic.w	r2, r2, #22
 8003394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x1da>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0208 	bic.w	r2, r2, #8
 80033c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	223f      	movs	r2, #63	; 0x3f
 80033cc:	409a      	lsls	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d07d      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
        }
        return;
 80033f2:	e078      	b.n	80034e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01c      	beq.n	800343c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	2b00      	cmp	r3, #0
 8003416:	d030      	beq.n	800347a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
 8003420:	e02b      	b.n	800347a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d027      	beq.n	800347a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e022      	b.n	800347a <HAL_DMA_IRQHandler+0x29e>
 8003434:	20000004 	.word	0x20000004
 8003438:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0210 	bic.w	r2, r2, #16
 8003458:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	2b00      	cmp	r3, #0
 8003480:	d032      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2205      	movs	r2, #5
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3301      	adds	r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d307      	bcc.n	80034c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f2      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x2ca>
 80034c0:	e000      	b.n	80034c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
 80034e4:	e000      	b.n	80034e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80034e6:	bf00      	nop
    }
  }
}
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop

080034f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	3b10      	subs	r3, #16
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <DMA_CalcBaseAndBitshift+0x64>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <DMA_CalcBaseAndBitshift+0x68>)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d909      	bls.n	8003532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	659a      	str	r2, [r3, #88]	; 0x58
 8003530:	e007      	b.n	8003542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	aaaaaaab 	.word	0xaaaaaaab
 8003558:	08006118 	.word	0x08006118

0800355c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d11f      	bne.n	80035b6 <DMA_CheckFifoParam+0x5a>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d856      	bhi.n	800362a <DMA_CheckFifoParam+0xce>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <DMA_CheckFifoParam+0x28>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a7 	.word	0x080035a7
 800358c:	08003595 	.word	0x08003595
 8003590:	0800362b 	.word	0x0800362b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d046      	beq.n	800362e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e043      	b.n	800362e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ae:	d140      	bne.n	8003632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b4:	e03d      	b.n	8003632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035be:	d121      	bne.n	8003604 <DMA_CheckFifoParam+0xa8>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d837      	bhi.n	8003636 <DMA_CheckFifoParam+0xda>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <DMA_CheckFifoParam+0x70>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035e3 	.word	0x080035e3
 80035d4:	080035dd 	.word	0x080035dd
 80035d8:	080035f5 	.word	0x080035f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e030      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d025      	beq.n	800363a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f2:	e022      	b.n	800363a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003602:	e01c      	b.n	800363e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d903      	bls.n	8003612 <DMA_CheckFifoParam+0xb6>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d003      	beq.n	8003618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003610:	e018      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      break;
 8003616:	e015      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      break;
 8003628:	e00b      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 800362a:	bf00      	nop
 800362c:	e00a      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e008      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
 8003634:	e006      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
 8003638:	e004      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
 800363c:	e002      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;   
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
    }
  } 
  
  return status; 
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e159      	b.n	8003924 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003670:	2201      	movs	r2, #1
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	f040 8148 	bne.w	800391e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d005      	beq.n	80036a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d130      	bne.n	8003708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036dc:	2201      	movs	r2, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 0201 	and.w	r2, r3, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d017      	beq.n	8003744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d123      	bne.n	8003798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	08da      	lsrs	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3208      	adds	r2, #8
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	220f      	movs	r2, #15
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0203 	and.w	r2, r3, #3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a2 	beq.w	800391e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b57      	ldr	r3, [pc, #348]	; (800393c <HAL_GPIO_Init+0x2e8>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_GPIO_Init+0x2e8>)
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ea:	4b54      	ldr	r3, [pc, #336]	; (800393c <HAL_GPIO_Init+0x2e8>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f6:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_GPIO_Init+0x2ec>)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	3302      	adds	r3, #2
 80037fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a49      	ldr	r2, [pc, #292]	; (8003944 <HAL_GPIO_Init+0x2f0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x202>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a48      	ldr	r2, [pc, #288]	; (8003948 <HAL_GPIO_Init+0x2f4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x1fe>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a47      	ldr	r2, [pc, #284]	; (800394c <HAL_GPIO_Init+0x2f8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x1fa>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a46      	ldr	r2, [pc, #280]	; (8003950 <HAL_GPIO_Init+0x2fc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x1f6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a45      	ldr	r2, [pc, #276]	; (8003954 <HAL_GPIO_Init+0x300>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x1f2>
 8003842:	2304      	movs	r3, #4
 8003844:	e008      	b.n	8003858 <HAL_GPIO_Init+0x204>
 8003846:	2307      	movs	r3, #7
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x204>
 800384a:	2303      	movs	r3, #3
 800384c:	e004      	b.n	8003858 <HAL_GPIO_Init+0x204>
 800384e:	2302      	movs	r3, #2
 8003850:	e002      	b.n	8003858 <HAL_GPIO_Init+0x204>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_GPIO_Init+0x204>
 8003856:	2300      	movs	r3, #0
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f002 0203 	and.w	r2, r2, #3
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	4093      	lsls	r3, r2
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003868:	4935      	ldr	r1, [pc, #212]	; (8003940 <HAL_GPIO_Init+0x2ec>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003876:	4b38      	ldr	r3, [pc, #224]	; (8003958 <HAL_GPIO_Init+0x304>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <HAL_GPIO_Init+0x304>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038a0:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_GPIO_Init+0x304>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c4:	4a24      	ldr	r2, [pc, #144]	; (8003958 <HAL_GPIO_Init+0x304>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b23      	ldr	r3, [pc, #140]	; (8003958 <HAL_GPIO_Init+0x304>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_GPIO_Init+0x304>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_GPIO_Init+0x304>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <HAL_GPIO_Init+0x304>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	f67f aea2 	bls.w	8003670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40013800 	.word	0x40013800
 8003944:	40020000 	.word	0x40020000
 8003948:	40020400 	.word	0x40020400
 800394c:	40020800 	.word	0x40020800
 8003950:	40020c00 	.word	0x40020c00
 8003954:	40021000 	.word	0x40021000
 8003958:	40013c00 	.word	0x40013c00

0800395c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
 8003968:	4613      	mov	r3, r2
 800396a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800396c:	787b      	ldrb	r3, [r7, #1]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003978:	e003      	b.n	8003982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800397a:	887b      	ldrh	r3, [r7, #2]
 800397c:	041a      	lsls	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	619a      	str	r2, [r3, #24]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	041a      	lsls	r2, r3, #16
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	400b      	ands	r3, r1
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f806 	bl	80039f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40013c00 	.word	0x40013c00

080039f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e12b      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fe fe64 	bl	8002700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a70:	f000 fd5c 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8003a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <HAL_I2C_Init+0x274>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d807      	bhi.n	8003a90 <HAL_I2C_Init+0x84>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a80      	ldr	r2, [pc, #512]	; (8003c84 <HAL_I2C_Init+0x278>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e006      	b.n	8003a9e <HAL_I2C_Init+0x92>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a7d      	ldr	r2, [pc, #500]	; (8003c88 <HAL_I2C_Init+0x27c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0e7      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a78      	ldr	r2, [pc, #480]	; (8003c8c <HAL_I2C_Init+0x280>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0c9b      	lsrs	r3, r3, #18
 8003ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_I2C_Init+0x274>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <HAL_I2C_Init+0xd4>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	e009      	b.n	8003af4 <HAL_I2C_Init+0xe8>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_I2C_Init+0x284>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	3301      	adds	r3, #1
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	495c      	ldr	r1, [pc, #368]	; (8003c80 <HAL_I2C_Init+0x274>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	d819      	bhi.n	8003b48 <HAL_I2C_Init+0x13c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e59      	subs	r1, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b28:	400b      	ands	r3, r1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_I2C_Init+0x138>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e59      	subs	r1, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	e051      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e04f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <HAL_I2C_Init+0x168>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e012      	b.n	8003b9a <HAL_I2C_Init+0x18e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x196>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_I2C_Init+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e58      	subs	r0, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	440b      	add	r3, r1
 8003bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc6:	e00f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6809      	ldr	r1, [r1, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6911      	ldr	r1, [r2, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	000186a0 	.word	0x000186a0
 8003c84:	001e847f 	.word	0x001e847f
 8003c88:	003d08ff 	.word	0x003d08ff
 8003c8c:	431bde83 	.word	0x431bde83
 8003c90:	10624dd3 	.word	0x10624dd3

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e264      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d075      	beq.n	8003d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb2:	4ba3      	ldr	r3, [pc, #652]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4ba0      	ldr	r3, [pc, #640]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d112      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cca:	4b9d      	ldr	r3, [pc, #628]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	4b99      	ldr	r3, [pc, #612]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05b      	beq.n	8003d9c <HAL_RCC_OscConfig+0x108>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d157      	bne.n	8003d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e23f      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x74>
 8003cfa:	4b91      	ldr	r3, [pc, #580]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a90      	ldr	r2, [pc, #576]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e01d      	b.n	8003d44 <HAL_RCC_OscConfig+0xb0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x98>
 8003d12:	4b8b      	ldr	r3, [pc, #556]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a8a      	ldr	r2, [pc, #552]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a87      	ldr	r2, [pc, #540]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0xb0>
 8003d2c:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a83      	ldr	r2, [pc, #524]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b81      	ldr	r3, [pc, #516]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a80      	ldr	r2, [pc, #512]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7ff f856 	bl	8002dfc <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d54:	f7ff f852 	bl	8002dfc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e204      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0xc0>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7ff f842 	bl	8002dfc <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7ff f83e 	bl	8002dfc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e1f0      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0xe8>
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d063      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003daa:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db6:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d11c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc2:	4b5f      	ldr	r3, [pc, #380]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d116      	bne.n	8003dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dce:	4b5c      	ldr	r3, [pc, #368]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_RCC_OscConfig+0x152>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e1c4      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4952      	ldr	r1, [pc, #328]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	e03a      	b.n	8003e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e04:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <HAL_RCC_OscConfig+0x2b0>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fff7 	bl	8002dfc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e12:	f7fe fff3 	bl	8002dfc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1a5      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4940      	ldr	r1, [pc, #256]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
 8003e44:	e015      	b.n	8003e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e46:	4b3f      	ldr	r3, [pc, #252]	; (8003f44 <HAL_RCC_OscConfig+0x2b0>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe ffd6 	bl	8002dfc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e54:	f7fe ffd2 	bl	8002dfc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e184      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d030      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <HAL_RCC_OscConfig+0x2b4>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe ffb6 	bl	8002dfc <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e94:	f7fe ffb2 	bl	8002dfc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e164      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x200>
 8003eb2:	e015      	b.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCC_OscConfig+0x2b4>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eba:	f7fe ff9f 	bl	8002dfc <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7fe ff9b 	bl	8002dfc <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e14d      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80a0 	beq.w	800402e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_OscConfig+0x2b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d121      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_RCC_OscConfig+0x2b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <HAL_RCC_OscConfig+0x2b8>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fe ff61 	bl	8002dfc <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	e011      	b.n	8003f62 <HAL_RCC_OscConfig+0x2ce>
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	42470000 	.word	0x42470000
 8003f48:	42470e80 	.word	0x42470e80
 8003f4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f50:	f7fe ff54 	bl	8002dfc <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e106      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x4e4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d106      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
 8003f76:	4b81      	ldr	r3, [pc, #516]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a80      	ldr	r2, [pc, #512]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	e01c      	b.n	8003fbe <HAL_RCC_OscConfig+0x32a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x312>
 8003f8c:	4b7b      	ldr	r3, [pc, #492]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	4a7a      	ldr	r2, [pc, #488]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6713      	str	r3, [r2, #112]	; 0x70
 8003f98:	4b78      	ldr	r3, [pc, #480]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a77      	ldr	r2, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	e00b      	b.n	8003fbe <HAL_RCC_OscConfig+0x32a>
 8003fa6:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a74      	ldr	r2, [pc, #464]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	4b72      	ldr	r3, [pc, #456]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a71      	ldr	r2, [pc, #452]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d015      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7fe ff19 	bl	8002dfc <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7fe ff15 	bl	8002dfc <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0c5      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	4b65      	ldr	r3, [pc, #404]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ee      	beq.n	8003fce <HAL_RCC_OscConfig+0x33a>
 8003ff0:	e014      	b.n	800401c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe ff03 	bl	8002dfc <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fe feff 	bl	8002dfc <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0af      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004010:	4b5a      	ldr	r3, [pc, #360]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ee      	bne.n	8003ffa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	4a55      	ldr	r2, [pc, #340]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 809b 	beq.w	800416e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	d05c      	beq.n	80040fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d141      	bne.n	80040d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCC_OscConfig+0x4ec>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fed3 	bl	8002dfc <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fecf 	bl	8002dfc <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e081      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406c:	4b43      	ldr	r3, [pc, #268]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	019b      	lsls	r3, r3, #6
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	4937      	ldr	r1, [pc, #220]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a2:	4b37      	ldr	r3, [pc, #220]	; (8004180 <HAL_RCC_OscConfig+0x4ec>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe fea8 	bl	8002dfc <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fea4 	bl	8002dfc <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e056      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b2e      	ldr	r3, [pc, #184]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x41c>
 80040ce:	e04e      	b.n	800416e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_RCC_OscConfig+0x4ec>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fe fe91 	bl	8002dfc <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040de:	f7fe fe8d 	bl	8002dfc <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e03f      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f0:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x44a>
 80040fc:	e037      	b.n	800416e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e032      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <HAL_RCC_OscConfig+0x4e8>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d028      	beq.n	800416a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d121      	bne.n	800416a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d11a      	bne.n	800416a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800413a:	4013      	ands	r3, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004140:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004142:	4293      	cmp	r3, r2
 8004144:	d111      	bne.n	800416a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	3b01      	subs	r3, #1
 8004154:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d107      	bne.n	800416a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40007000 	.word	0x40007000
 800417c:	40023800 	.word	0x40023800
 8004180:	42470060 	.word	0x42470060

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0cc      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d90c      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b63      	ldr	r3, [pc, #396]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b8      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a58      	ldr	r2, [pc, #352]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f0:	4b53      	ldr	r3, [pc, #332]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a52      	ldr	r2, [pc, #328]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b50      	ldr	r3, [pc, #320]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	494d      	ldr	r1, [pc, #308]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d044      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4b47      	ldr	r3, [pc, #284]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d119      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e07f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d003      	beq.n	8004242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423e:	2b03      	cmp	r3, #3
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e06f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004252:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e067      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004262:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4934      	ldr	r1, [pc, #208]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004274:	f7fe fdc2 	bl	8002dfc <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	e00a      	b.n	8004292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427c:	f7fe fdbe 	bl	8002dfc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 020c 	and.w	r2, r3, #12
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1eb      	bne.n	800427c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d20c      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e032      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d8:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4916      	ldr	r1, [pc, #88]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	490e      	ldr	r1, [pc, #56]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800430a:	f000 f821 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 800430e:	4602      	mov	r2, r0
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	490a      	ldr	r1, [pc, #40]	; (8004344 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	5ccb      	ldrb	r3, [r1, r3]
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fd22 	bl	8002d74 <HAL_InitTick>

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023c00 	.word	0x40023c00
 8004340:	40023800 	.word	0x40023800
 8004344:	08006100 	.word	0x08006100
 8004348:	20000004 	.word	0x20000004
 800434c:	20000008 	.word	0x20000008

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	2300      	movs	r3, #0
 8004362:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004368:	4b67      	ldr	r3, [pc, #412]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d00d      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x40>
 8004374:	2b08      	cmp	r3, #8
 8004376:	f200 80bd 	bhi.w	80044f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x34>
 800437e:	2b04      	cmp	r3, #4
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x3a>
 8004382:	e0b7      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004384:	4b61      	ldr	r3, [pc, #388]	; (800450c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004386:	60bb      	str	r3, [r7, #8]
       break;
 8004388:	e0b7      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800438a:	4b61      	ldr	r3, [pc, #388]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800438c:	60bb      	str	r3, [r7, #8]
      break;
 800438e:	e0b4      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004390:	4b5d      	ldr	r3, [pc, #372]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439a:	4b5b      	ldr	r3, [pc, #364]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d04d      	beq.n	8004442 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a6:	4b58      	ldr	r3, [pc, #352]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	099b      	lsrs	r3, r3, #6
 80043ac:	461a      	mov	r2, r3
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	ea02 0800 	and.w	r8, r2, r0
 80043be:	ea03 0901 	and.w	r9, r3, r1
 80043c2:	4640      	mov	r0, r8
 80043c4:	4649      	mov	r1, r9
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	014b      	lsls	r3, r1, #5
 80043d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043d4:	0142      	lsls	r2, r0, #5
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	ebb0 0008 	subs.w	r0, r0, r8
 80043de:	eb61 0109 	sbc.w	r1, r1, r9
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	018b      	lsls	r3, r1, #6
 80043ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043f0:	0182      	lsls	r2, r0, #6
 80043f2:	1a12      	subs	r2, r2, r0
 80043f4:	eb63 0301 	sbc.w	r3, r3, r1
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	00d9      	lsls	r1, r3, #3
 8004402:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004406:	00d0      	lsls	r0, r2, #3
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	eb12 0208 	adds.w	r2, r2, r8
 8004410:	eb43 0309 	adc.w	r3, r3, r9
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	0259      	lsls	r1, r3, #9
 800441e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004422:	0250      	lsls	r0, r2, #9
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	461a      	mov	r2, r3
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	f7fc faec 	bl	8000a10 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4613      	mov	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e04a      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	461a      	mov	r2, r3
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	ea02 0400 	and.w	r4, r2, r0
 800445a:	ea03 0501 	and.w	r5, r3, r1
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	014b      	lsls	r3, r1, #5
 800446c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004470:	0142      	lsls	r2, r0, #5
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	1b00      	subs	r0, r0, r4
 8004478:	eb61 0105 	sbc.w	r1, r1, r5
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	018b      	lsls	r3, r1, #6
 8004486:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800448a:	0182      	lsls	r2, r0, #6
 800448c:	1a12      	subs	r2, r2, r0
 800448e:	eb63 0301 	sbc.w	r3, r3, r1
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	00d9      	lsls	r1, r3, #3
 800449c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044a0:	00d0      	lsls	r0, r2, #3
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	1912      	adds	r2, r2, r4
 80044a8:	eb45 0303 	adc.w	r3, r5, r3
 80044ac:	f04f 0000 	mov.w	r0, #0
 80044b0:	f04f 0100 	mov.w	r1, #0
 80044b4:	0299      	lsls	r1, r3, #10
 80044b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044ba:	0290      	lsls	r0, r2, #10
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	f7fc faa0 	bl	8000a10 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	3301      	adds	r3, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	60bb      	str	r3, [r7, #8]
      break;
 80044f2:	e002      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044f6:	60bb      	str	r3, [r7, #8]
      break;
 80044f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fa:	68bb      	ldr	r3, [r7, #8]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200

08004514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_RCC_GetHCLKFreq+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004530:	f7ff fff0 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	08006110 	.word	0x08006110

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004558:	f7ff ffdc 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0b5b      	lsrs	r3, r3, #13
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08006110 	.word	0x08006110

0800457c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e041      	b.n	8004612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fe f942 	bl	800282c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fe94 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e041      	b.n	80046b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fe f8b5 	bl	80027b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 fe45 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <HAL_TIM_PWM_Start+0x24>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e022      	b.n	8004722 <HAL_TIM_PWM_Start+0x6a>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d109      	bne.n	80046f6 <HAL_TIM_PWM_Start+0x3e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e015      	b.n	8004722 <HAL_TIM_PWM_Start+0x6a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d109      	bne.n	8004710 <HAL_TIM_PWM_Start+0x58>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e008      	b.n	8004722 <HAL_TIM_PWM_Start+0x6a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e068      	b.n	80047fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0x82>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	e013      	b.n	8004762 <HAL_TIM_PWM_Start+0xaa>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0x92>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	e00b      	b.n	8004762 <HAL_TIM_PWM_Start+0xaa>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	e003      	b.n	8004762 <HAL_TIM_PWM_Start+0xaa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f980 	bl	8005a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a23      	ldr	r2, [pc, #140]	; (8004804 <HAL_TIM_PWM_Start+0x14c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d107      	bne.n	800478a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <HAL_TIM_PWM_Start+0x14c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d018      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x10e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479c:	d013      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x10e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a19      	ldr	r2, [pc, #100]	; (8004808 <HAL_TIM_PWM_Start+0x150>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x10e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_TIM_PWM_Start+0x154>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x10e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <HAL_TIM_PWM_Start+0x158>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x10e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a14      	ldr	r2, [pc, #80]	; (8004814 <HAL_TIM_PWM_Start+0x15c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d111      	bne.n	80047ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d010      	beq.n	80047fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	e007      	b.n	80047fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40014000 	.word	0x40014000

08004818 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f001 f920 	bl	8005a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_TIM_PWM_Stop+0xc4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d117      	bne.n	800486a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	f241 1311 	movw	r3, #4369	; 0x1111
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_TIM_PWM_Stop+0x52>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	f240 4344 	movw	r3, #1092	; 0x444
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_TIM_PWM_Stop+0x52>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a1a      	ldr	r2, [r3, #32]
 8004870:	f241 1311 	movw	r3, #4369	; 0x1111
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <HAL_TIM_PWM_Stop+0x82>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	f240 4344 	movw	r3, #1092	; 0x444
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d107      	bne.n	800489a <HAL_TIM_PWM_Stop+0x82>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Stop+0x92>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	e013      	b.n	80048d2 <HAL_TIM_PWM_Stop+0xba>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Stop+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b8:	e00b      	b.n	80048d2 <HAL_TIM_PWM_Stop+0xba>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Stop+0xb2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	e003      	b.n	80048d2 <HAL_TIM_PWM_Stop+0xba>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40010000 	.word	0x40010000

080048e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e041      	b.n	8004976 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd ffb6 	bl	8002878 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 fce2 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <HAL_TIM_IC_Start_IT+0x1e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e013      	b.n	80049c6 <HAL_TIM_IC_Start_IT+0x46>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IC_Start_IT+0x2e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e00b      	b.n	80049c6 <HAL_TIM_IC_Start_IT+0x46>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d104      	bne.n	80049be <HAL_TIM_IC_Start_IT+0x3e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e003      	b.n	80049c6 <HAL_TIM_IC_Start_IT+0x46>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <HAL_TIM_IC_Start_IT+0x58>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e013      	b.n	8004a00 <HAL_TIM_IC_Start_IT+0x80>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d104      	bne.n	80049e8 <HAL_TIM_IC_Start_IT+0x68>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e00b      	b.n	8004a00 <HAL_TIM_IC_Start_IT+0x80>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d104      	bne.n	80049f8 <HAL_TIM_IC_Start_IT+0x78>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e003      	b.n	8004a00 <HAL_TIM_IC_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a02:	7bbb      	ldrb	r3, [r7, #14]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d102      	bne.n	8004a0e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a08:	7b7b      	ldrb	r3, [r7, #13]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0c2      	b.n	8004b98 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_IC_Start_IT+0xa2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a20:	e013      	b.n	8004a4a <HAL_TIM_IC_Start_IT+0xca>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_IC_Start_IT+0xb2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	e00b      	b.n	8004a4a <HAL_TIM_IC_Start_IT+0xca>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_IC_Start_IT+0xc2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	e003      	b.n	8004a4a <HAL_TIM_IC_Start_IT+0xca>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Start_IT+0xda>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a58:	e013      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x102>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_IC_Start_IT+0xea>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a68:	e00b      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x102>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_IC_Start_IT+0xfa>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a78:	e003      	b.n	8004a82 <HAL_TIM_IC_Start_IT+0x102>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d841      	bhi.n	8004b0c <HAL_TIM_IC_Start_IT+0x18c>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_TIM_IC_Start_IT+0x110>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004b0d 	.word	0x08004b0d
 8004a98:	08004b0d 	.word	0x08004b0d
 8004a9c:	08004b0d 	.word	0x08004b0d
 8004aa0:	08004ad7 	.word	0x08004ad7
 8004aa4:	08004b0d 	.word	0x08004b0d
 8004aa8:	08004b0d 	.word	0x08004b0d
 8004aac:	08004b0d 	.word	0x08004b0d
 8004ab0:	08004ae9 	.word	0x08004ae9
 8004ab4:	08004b0d 	.word	0x08004b0d
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004b0d 	.word	0x08004b0d
 8004ac0:	08004afb 	.word	0x08004afb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0202 	orr.w	r2, r2, #2
 8004ad2:	60da      	str	r2, [r3, #12]
      break;
 8004ad4:	e01d      	b.n	8004b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0204 	orr.w	r2, r2, #4
 8004ae4:	60da      	str	r2, [r3, #12]
      break;
 8004ae6:	e014      	b.n	8004b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	60da      	str	r2, [r3, #12]
      break;
 8004af8:	e00b      	b.n	8004b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0210 	orr.w	r2, r2, #16
 8004b08:	60da      	str	r2, [r3, #12]
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b10:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d13e      	bne.n	8004b96 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ffa5 	bl	8005a70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <HAL_TIM_IC_Start_IT+0x220>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_TIM_IC_Start_IT+0x1e2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d013      	beq.n	8004b62 <HAL_TIM_IC_Start_IT+0x1e2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_TIM_IC_Start_IT+0x224>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIM_IC_Start_IT+0x1e2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_TIM_IC_Start_IT+0x228>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIM_IC_Start_IT+0x1e2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_TIM_IC_Start_IT+0x22c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIM_IC_Start_IT+0x1e2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <HAL_TIM_IC_Start_IT+0x230>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d010      	beq.n	8004b96 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	e007      	b.n	8004b96 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40014000 	.word	0x40014000

08004bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d122      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d11b      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0202 	mvn.w	r2, #2
 8004be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc faf8 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fb54 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fb5b 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d122      	bne.n	8004c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11b      	bne.n	8004c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0204 	mvn.w	r2, #4
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc face 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fb2a 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb31 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0208 	mvn.w	r2, #8
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc faa4 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fb00 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb07 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0210 	mvn.w	r2, #16
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc fa7a 	bl	80011ec <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fad6 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fadd 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0201 	mvn.w	r2, #1
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fab0 	bl	8005298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 ff76 	bl	8005c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 faa2 	bl	80052d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0220 	mvn.w	r2, #32
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 ff40 	bl	8005c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e088      	b.n	8004ef4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11b      	bne.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f000 fc7e 	bl	8005700 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 020c 	bic.w	r2, r2, #12
 8004e12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6999      	ldr	r1, [r3, #24]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	619a      	str	r2, [r3, #24]
 8004e26:	e060      	b.n	8004eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d11c      	bne.n	8004e68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f000 fcf6 	bl	800582e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6999      	ldr	r1, [r3, #24]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
 8004e66:	e040      	b.n	8004eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11b      	bne.n	8004ea6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f000 fd43 	bl	8005908 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 020c 	bic.w	r2, r2, #12
 8004e90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
 8004ea4:	e021      	b.n	8004eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d11c      	bne.n	8004ee6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f000 fd60 	bl	8005980 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ece:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69d9      	ldr	r1, [r3, #28]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	61da      	str	r2, [r3, #28]
 8004ee4:	e001      	b.n	8004eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e0ae      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	f200 809f 	bhi.w	8005068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08005069 	.word	0x08005069
 8004f38:	08005069 	.word	0x08005069
 8004f3c:	08005069 	.word	0x08005069
 8004f40:	08004fa5 	.word	0x08004fa5
 8004f44:	08005069 	.word	0x08005069
 8004f48:	08005069 	.word	0x08005069
 8004f4c:	08005069 	.word	0x08005069
 8004f50:	08004fe7 	.word	0x08004fe7
 8004f54:	08005069 	.word	0x08005069
 8004f58:	08005069 	.word	0x08005069
 8004f5c:	08005069 	.word	0x08005069
 8004f60:	08005027 	.word	0x08005027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fa3c 	bl	80053e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
      break;
 8004fa2:	e064      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fa82 	bl	80054b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]
      break;
 8004fe4:	e043      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 facd 	bl	800558c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0208 	orr.w	r2, r2, #8
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0204 	bic.w	r2, r2, #4
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	61da      	str	r2, [r3, #28]
      break;
 8005024:	e023      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fb17 	bl	8005660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	61da      	str	r2, [r3, #28]
      break;
 8005066:	e002      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
      break;
 800506c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIM_ConfigClockSource+0x1c>
 8005098:	2302      	movs	r3, #2
 800509a:	e0b4      	b.n	8005206 <HAL_TIM_ConfigClockSource+0x186>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d03e      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0xd4>
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050da:	f200 8087 	bhi.w	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	f000 8086 	beq.w	80051f2 <HAL_TIM_ConfigClockSource+0x172>
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d87f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d01a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xa6>
 80050f0:	2b70      	cmp	r3, #112	; 0x70
 80050f2:	d87b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d050      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x11a>
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d877      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b50      	cmp	r3, #80	; 0x50
 80050fe:	d03c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0xfa>
 8005100:	2b50      	cmp	r3, #80	; 0x50
 8005102:	d873      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d058      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x13a>
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d86f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d064      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005110:	2b30      	cmp	r3, #48	; 0x30
 8005112:	d86b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d060      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d867      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b10      	cmp	r3, #16
 8005122:	d05a      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005124:	e062      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6899      	ldr	r1, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f000 fc7b 	bl	8005a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	609a      	str	r2, [r3, #8]
      break;
 8005152:	e04f      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 fc64 	bl	8005a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005176:	609a      	str	r2, [r3, #8]
      break;
 8005178:	e03c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fb22 	bl	80057d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2150      	movs	r1, #80	; 0x50
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fc31 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 8005198:	e02c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fb7e 	bl	80058a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2160      	movs	r1, #96	; 0x60
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fc21 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 80051b8:	e01c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fb02 	bl	80057d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fc11 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 80051d8:	e00c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 fc08 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 80051ea:	e003      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      break;
 80051f0:	e000      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	d831      	bhi.n	8005288 <HAL_TIM_ReadCapturedValue+0x78>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	08005261 	.word	0x08005261
 8005230:	08005289 	.word	0x08005289
 8005234:	08005289 	.word	0x08005289
 8005238:	08005289 	.word	0x08005289
 800523c:	0800526b 	.word	0x0800526b
 8005240:	08005289 	.word	0x08005289
 8005244:	08005289 	.word	0x08005289
 8005248:	08005289 	.word	0x08005289
 800524c:	08005275 	.word	0x08005275
 8005250:	08005289 	.word	0x08005289
 8005254:	08005289 	.word	0x08005289
 8005258:	08005289 	.word	0x08005289
 800525c:	0800527f 	.word	0x0800527f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	60fb      	str	r3, [r7, #12]

      break;
 8005268:	e00f      	b.n	800528a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	60fb      	str	r3, [r7, #12]

      break;
 8005272:	e00a      	b.n	800528a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	60fb      	str	r3, [r7, #12]

      break;
 800527c:	e005      	b.n	800528a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	60fb      	str	r3, [r7, #12]

      break;
 8005286:	e000      	b.n	800528a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005288:	bf00      	nop
  }

  return tmpreg;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a34      	ldr	r2, [pc, #208]	; (80053cc <TIM_Base_SetConfig+0xe4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0x38>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0x38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a31      	ldr	r2, [pc, #196]	; (80053d0 <TIM_Base_SetConfig+0xe8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0x38>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a30      	ldr	r2, [pc, #192]	; (80053d4 <TIM_Base_SetConfig+0xec>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0x38>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <TIM_Base_SetConfig+0xf0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a25      	ldr	r2, [pc, #148]	; (80053cc <TIM_Base_SetConfig+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01b      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005340:	d017      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <TIM_Base_SetConfig+0xe8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a21      	ldr	r2, [pc, #132]	; (80053d4 <TIM_Base_SetConfig+0xec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00f      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <TIM_Base_SetConfig+0xf0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00b      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <TIM_Base_SetConfig+0xf4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d007      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <TIM_Base_SetConfig+0xf8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <TIM_Base_SetConfig+0xfc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d108      	bne.n	8005384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a08      	ldr	r2, [pc, #32]	; (80053cc <TIM_Base_SetConfig+0xe4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800

080053e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0201 	bic.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 0302 	bic.w	r3, r3, #2
 8005430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <TIM_OC1_SetConfig+0xc8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10c      	bne.n	800545e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0308 	bic.w	r3, r3, #8
 800544a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <TIM_OC1_SetConfig+0xc8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d111      	bne.n	800548a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40010000 	.word	0x40010000

080054b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0210 	bic.w	r2, r3, #16
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0320 	bic.w	r3, r3, #32
 80054fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <TIM_OC2_SetConfig+0xd4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10d      	bne.n	8005530 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <TIM_OC2_SetConfig+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d113      	bne.n	8005560 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800553e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000

0800558c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <TIM_OC3_SetConfig+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10d      	bne.n	8005606 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a14      	ldr	r2, [pc, #80]	; (800565c <TIM_OC3_SetConfig+0xd0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d113      	bne.n	8005636 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40010000 	.word	0x40010000

08005660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	031b      	lsls	r3, r3, #12
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a10      	ldr	r2, [pc, #64]	; (80056fc <TIM_OC4_SetConfig+0x9c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d109      	bne.n	80056d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000

08005700 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a24      	ldr	r2, [pc, #144]	; (80057bc <TIM_TI1_SetConfig+0xbc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_TI1_SetConfig+0x56>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d00f      	beq.n	8005756 <TIM_TI1_SetConfig+0x56>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <TIM_TI1_SetConfig+0xc0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_TI1_SetConfig+0x56>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <TIM_TI1_SetConfig+0xc4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_TI1_SetConfig+0x56>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <TIM_TI1_SetConfig+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_TI1_SetConfig+0x56>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <TIM_TI1_SetConfig+0xcc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <TIM_TI1_SetConfig+0x5a>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <TIM_TI1_SetConfig+0x5c>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e003      	b.n	800577a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	b2db      	uxtb	r3, r3
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f023 030a 	bic.w	r3, r3, #10
 8005794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 030a 	and.w	r3, r3, #10
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40014000 	.word	0x40014000

080057d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f023 0201 	bic.w	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 030a 	bic.w	r3, r3, #10
 800580c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800582e:	b480      	push	{r7}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 0210 	bic.w	r2, r3, #16
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800586c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	031b      	lsls	r3, r3, #12
 8005872:	b29b      	uxth	r3, r3
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005880:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 0210 	bic.w	r2, r3, #16
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	031b      	lsls	r3, r3, #12
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 0303 	bic.w	r3, r3, #3
 8005934:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	b2db      	uxtb	r3, r3
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005958:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	621a      	str	r2, [r3, #32]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	031b      	lsls	r3, r3, #12
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	031b      	lsls	r3, r3, #12
 80059d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f043 0307 	orr.w	r3, r3, #7
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	609a      	str	r2, [r3, #8]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	021a      	lsls	r2, r3, #8
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2201      	movs	r2, #1
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1a      	ldr	r2, [r3, #32]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	401a      	ands	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a1a      	ldr	r2, [r3, #32]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e050      	b.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d013      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d10c      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40014000 	.word	0x40014000

08005b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e03d      	b.n	8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e03f      	b.n	8005cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fc ff1e 	bl	8002acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	; 0x24
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f829 	bl	8005d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b09f      	sub	sp, #124	; 0x7c
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	ea40 0301 	orr.w	r3, r0, r1
 8005d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d44:	f021 010c 	bic.w	r1, r1, #12
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	6999      	ldr	r1, [r3, #24]
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	ea40 0301 	orr.w	r3, r0, r1
 8005d68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4bc5      	ldr	r3, [pc, #788]	; (8006084 <UART_SetConfig+0x384>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d004      	beq.n	8005d7e <UART_SetConfig+0x7e>
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4bc3      	ldr	r3, [pc, #780]	; (8006088 <UART_SetConfig+0x388>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d103      	bne.n	8005d86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d7e:	f7fe fbe9 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 8005d82:	6778      	str	r0, [r7, #116]	; 0x74
 8005d84:	e002      	b.n	8005d8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d86:	f7fe fbd1 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8005d8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d94:	f040 80b6 	bne.w	8005f04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	f04f 0500 	mov.w	r5, #0
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	1891      	adds	r1, r2, r2
 8005da6:	6439      	str	r1, [r7, #64]	; 0x40
 8005da8:	415b      	adcs	r3, r3
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
 8005dac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db0:	1912      	adds	r2, r2, r4
 8005db2:	eb45 0303 	adc.w	r3, r5, r3
 8005db6:	f04f 0000 	mov.w	r0, #0
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	00d9      	lsls	r1, r3, #3
 8005dc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dc4:	00d0      	lsls	r0, r2, #3
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	1911      	adds	r1, r2, r4
 8005dcc:	6639      	str	r1, [r7, #96]	; 0x60
 8005dce:	416b      	adcs	r3, r5
 8005dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	1891      	adds	r1, r2, r2
 8005dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8005de0:	415b      	adcs	r3, r3
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005de8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dec:	f7fa fe10 	bl	8000a10 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4ba5      	ldr	r3, [pc, #660]	; (800608c <UART_SetConfig+0x38c>)
 8005df6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	011e      	lsls	r6, r3, #4
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e00:	461c      	mov	r4, r3
 8005e02:	f04f 0500 	mov.w	r5, #0
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
 8005e12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e16:	1912      	adds	r2, r2, r4
 8005e18:	eb45 0303 	adc.w	r3, r5, r3
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	00d9      	lsls	r1, r3, #3
 8005e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e2a:	00d0      	lsls	r0, r2, #3
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	1911      	adds	r1, r2, r4
 8005e32:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e34:	416b      	adcs	r3, r5
 8005e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	1891      	adds	r1, r2, r2
 8005e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e46:	415b      	adcs	r3, r3
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e52:	f7fa fddd 	bl	8000a10 <__aeabi_uldivmod>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4b8c      	ldr	r3, [pc, #560]	; (800608c <UART_SetConfig+0x38c>)
 8005e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a87      	ldr	r2, [pc, #540]	; (800608c <UART_SetConfig+0x38c>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e7c:	441e      	add	r6, r3
 8005e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e80:	4618      	mov	r0, r3
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	1894      	adds	r4, r2, r2
 8005e8c:	623c      	str	r4, [r7, #32]
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e96:	1812      	adds	r2, r2, r0
 8005e98:	eb41 0303 	adc.w	r3, r1, r3
 8005e9c:	f04f 0400 	mov.w	r4, #0
 8005ea0:	f04f 0500 	mov.w	r5, #0
 8005ea4:	00dd      	lsls	r5, r3, #3
 8005ea6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eaa:	00d4      	lsls	r4, r2, #3
 8005eac:	4622      	mov	r2, r4
 8005eae:	462b      	mov	r3, r5
 8005eb0:	1814      	adds	r4, r2, r0
 8005eb2:	653c      	str	r4, [r7, #80]	; 0x50
 8005eb4:	414b      	adcs	r3, r1
 8005eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	61b9      	str	r1, [r7, #24]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ece:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ed2:	f7fa fd9d 	bl	8000a10 <__aeabi_uldivmod>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <UART_SetConfig+0x38c>)
 8005edc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	2164      	movs	r1, #100	; 0x64
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	3332      	adds	r3, #50	; 0x32
 8005eee:	4a67      	ldr	r2, [pc, #412]	; (800608c <UART_SetConfig+0x38c>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f003 0207 	and.w	r2, r3, #7
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4432      	add	r2, r6
 8005f00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f02:	e0b9      	b.n	8006078 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f06:	461c      	mov	r4, r3
 8005f08:	f04f 0500 	mov.w	r5, #0
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	1891      	adds	r1, r2, r2
 8005f12:	6139      	str	r1, [r7, #16]
 8005f14:	415b      	adcs	r3, r3
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f1c:	1912      	adds	r2, r2, r4
 8005f1e:	eb45 0303 	adc.w	r3, r5, r3
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	00d9      	lsls	r1, r3, #3
 8005f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f30:	00d0      	lsls	r0, r2, #3
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	eb12 0804 	adds.w	r8, r2, r4
 8005f3a:	eb43 0905 	adc.w	r9, r3, r5
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	008b      	lsls	r3, r1, #2
 8005f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f56:	0082      	lsls	r2, r0, #2
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa fd58 	bl	8000a10 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b49      	ldr	r3, [pc, #292]	; (800608c <UART_SetConfig+0x38c>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011e      	lsls	r6, r3, #4
 8005f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f70:	4618      	mov	r0, r3
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	1894      	adds	r4, r2, r2
 8005f7c:	60bc      	str	r4, [r7, #8]
 8005f7e:	415b      	adcs	r3, r3
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f86:	1812      	adds	r2, r2, r0
 8005f88:	eb41 0303 	adc.w	r3, r1, r3
 8005f8c:	f04f 0400 	mov.w	r4, #0
 8005f90:	f04f 0500 	mov.w	r5, #0
 8005f94:	00dd      	lsls	r5, r3, #3
 8005f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f9a:	00d4      	lsls	r4, r2, #3
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	1814      	adds	r4, r2, r0
 8005fa2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fa4:	414b      	adcs	r3, r1
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	008b      	lsls	r3, r1, #2
 8005fbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fc0:	0082      	lsls	r2, r0, #2
 8005fc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fc6:	f7fa fd23 	bl	8000a10 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <UART_SetConfig+0x38c>)
 8005fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <UART_SetConfig+0x38c>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fee:	441e      	add	r6, r3
 8005ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f04f 0100 	mov.w	r1, #0
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	1894      	adds	r4, r2, r2
 8005ffe:	603c      	str	r4, [r7, #0]
 8006000:	415b      	adcs	r3, r3
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006008:	1812      	adds	r2, r2, r0
 800600a:	eb41 0303 	adc.w	r3, r1, r3
 800600e:	f04f 0400 	mov.w	r4, #0
 8006012:	f04f 0500 	mov.w	r5, #0
 8006016:	00dd      	lsls	r5, r3, #3
 8006018:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800601c:	00d4      	lsls	r4, r2, #3
 800601e:	4622      	mov	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	eb12 0a00 	adds.w	sl, r2, r0
 8006026:	eb43 0b01 	adc.w	fp, r3, r1
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	008b      	lsls	r3, r1, #2
 800603e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006042:	0082      	lsls	r2, r0, #2
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	f7fa fce2 	bl	8000a10 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4b0e      	ldr	r3, [pc, #56]	; (800608c <UART_SetConfig+0x38c>)
 8006052:	fba3 1302 	umull	r1, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	2164      	movs	r1, #100	; 0x64
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	3332      	adds	r3, #50	; 0x32
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <UART_SetConfig+0x38c>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4432      	add	r2, r6
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	bf00      	nop
 800607a:	377c      	adds	r7, #124	; 0x7c
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40011000 	.word	0x40011000
 8006088:	40011400 	.word	0x40011400
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	; (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	; (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	; (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	; (80060d4 <__libc_init_array+0x44>)
 80060a4:	f000 f820 	bl	80060e8 <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	08006128 	.word	0x08006128
 80060cc:	08006128 	.word	0x08006128
 80060d0:	08006128 	.word	0x08006128
 80060d4:	0800612c 	.word	0x0800612c

080060d8 <memset>:
 80060d8:	4402      	add	r2, r0
 80060da:	4603      	mov	r3, r0
 80060dc:	4293      	cmp	r3, r2
 80060de:	d100      	bne.n	80060e2 <memset+0xa>
 80060e0:	4770      	bx	lr
 80060e2:	f803 1b01 	strb.w	r1, [r3], #1
 80060e6:	e7f9      	b.n	80060dc <memset+0x4>

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
